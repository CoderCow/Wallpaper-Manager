<!-- 
  THIS FILE IS PROVIDED UNDER THE TERMS OF THE CREATIVE COMMONS PUBLIC LICENSE WHICH CAN BE FOUND IN THE PROVIDED License.txt 
  FILE. IT IS PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE WORK OTHER THAN AS AUTHORIZED UNDER ITS 
  LICENSE OR COPYRIGHT LAW IS PROHIBITED.
  
  Written by David-Kay Posmyk (KayPosmyk@gmx.de)
-->
  
<Window 
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
  xmlns:Common.Presentation="clr-namespace:Common.Presentation;assembly=Common4.0" 
  xmlns:Common.Windows.Controls="clr-namespace:Common.Windows.Controls;assembly=Common4.0" 
  
  xmlns:local="clr-namespace:WallpaperManager.Presentation" 
  xmlns:Data="clr-namespace:WallpaperManager.Data"
  
  x:Class="WallpaperManager.Presentation.ConfigWallpaperWindow" 
  Icon="..\Resources\Icons\Configuration.png" 
  WindowStartupLocation="CenterOwner" 
  MinWidth="350" 
  WindowStyle="SingleBorderWindow" 
  ResizeMode="NoResize" 
  SizeToContent="WidthAndHeight" 
  ShowInTaskbar="False" 
  DataContext="{Binding RelativeSource={RelativeSource Mode=Self}}"
>
  <Window.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="..\Resources\Dialog.xaml" />
      </ResourceDictionary.MergedDictionaries>
      
      <!-- Converters / Validation Rules -->
      <Common.Presentation:ColorToHtmlStringConverter x:Key="ColorToHtmlStringConverter" />
      
      <Common.Presentation:ColorStringValidationRule x:Key="ColorStringValidationRule" AllowTransparency="False" />
      <Common.Presentation:NumberValidationRule 
        x:Key="OffsetValidationRule" AllowsRationalNumber="False" MinValue="-65535" MaxValue="65535" 
      />
      <Common.Presentation:NumberValidationRule 
        x:Key="ScaleValidationRule" AllowsRationalNumber="False" MinValue="-99" MaxValue="5000" 
      />
      
      <BitmapImage x:Key="Images.NoPreview" UriSource="..\Resources\Images\No Preview.png" />

      <!-- ToolTips -->
      <ToolTip x:Key="ToolTips.General.MultiscreenWallpaper.Auto">
        <local:ToolTipData
          Title="Auto Determine Multiscreen Wallpaper"
          Content="If selected, Wallpaper Manager will automatically suggest new wallpapers as single- or multiscreen wallpapers."
          IsMultiscreenFeature="True"
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.General.MultiscreenWallpaper.Yes">
        <local:ToolTipData 
          Title="Treat Always as Multiscreen Wallpaper"
          Content="If selected, Wallpaper Manager will treat any added wallpaper as multiscreen wallpaper."
          IsMultiscreenFeature="True"
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.General.MultiscreenWallpaper.No">
        <local:ToolTipData 
          Title="Treat Never as Multiscreen Wallpaper"
          Content="If selected, Wallpaper Manager will treat any added wallpaper as singlescreen wallpaper."
          IsMultiscreenFeature="True"
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.General.MultiscreenWallpaper">
        <local:ToolTipData 
          Title="If Multiscreen Wallpaper"
          Content="If selected, Wallpaper Manager will place the wallpaper over all monitors."
          IsMultiscreenFeature="True"
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.General.ImagePath">
        <local:ToolTipData 
          Title="Image Path"
          Content="The path to the wallpaper-image."
          NoteIcon="{StaticResource Global.Icons.Information}"
          NoteText="Right-Click on the button to remove the wallpaper-image."
        />
      </ToolTip>

      <ToolTip x:Key="ToolTips.General.Background">
        <local:ToolTipData 
          Title="Background Color"
          Content="The color which is displayed behind the image."
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.General.Priority">
        <local:ToolTipData 
          Title="Cycle Priority"
          Content="When cycling randomly, this value defines how often the wallpaper is picked."
          NoteIcon="{StaticResource Global.Icons.Information}"
          NoteText="{StaticResource Global.Text.DragableTextBoxInfo}"
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.CycleConditions.OnlyCycleBetweenStart">
        <local:ToolTipData 
          Title="Cycle Time Condition"
          Content="This value defines the time of the day when Wallpaper Mananger should start cycling this wallpaper."
          NoteIcon="{StaticResource Global.Icons.Information}"
          NoteText="{StaticResource Global.Text.DragableTextBoxInfo}"
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.CycleConditions.OnlyCycleBetweenStop">
        <local:ToolTipData 
          Title="Cycle Time of Day Condition"
          Content="This value defines the time of the day when Wallpaper Mananger should stop cycling this wallpaper."
          NoteIcon="{StaticResource Global.Icons.Information}"
          NoteText="{StaticResource Global.Text.DragableTextBoxInfo}"
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.CycleConditions.OnlyCycleOnMonitor">
        <local:ToolTipData 
          Title="Cycle Time of Day Condition"
          Content="If checked, Wallpaper Manager will cycle this wallpaper on this monitor."
          IsMultiscreenFeature="True"
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.Placement.Auto">
        <local:ToolTipData 
          Title="Auto Determine Placement"
          Content="If selected, Wallpaper Manager will automatically suggest a placement-mode for the new wallpaper."
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.Placement.HOffset">
        <local:ToolTipData 
          Title="Horizontal Offset"
          Content="This value moves the wallpaper on the horizontal axis by the given pixels."
          NoteIcon="{StaticResource Global.Icons.Information}"
          NoteText="{StaticResource Global.Text.DragableTextBoxInfo}"
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.Placement.VOffset">
        <local:ToolTipData 
          Title="Vertical Offset"
          Content="This value moves the wallpaper on the vertical axis by the given pixels."
          NoteIcon="{StaticResource Global.Icons.Information}"
          NoteText="{StaticResource Global.Text.DragableTextBoxInfo}"
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.Placement.HScale">
        <local:ToolTipData 
          Title="Horizontal Scale"
          Content="This value scales the wallpaper on the horizontal axis by the given percentage."
          NoteIcon="{StaticResource Global.Icons.Information}"
          NoteText="{StaticResource Global.Text.DragableTextBoxInfo}"
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.Placement.VScale">
        <local:ToolTipData 
          Title="Vertical Scale"
          Content="This value scales the wallpaper on the vertical axis by the given percentage."
          NoteIcon="{StaticResource Global.Icons.Information}"
          NoteText="{StaticResource Global.Text.DragableTextBoxInfo}"
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.Effects.HFlip">
        <local:ToolTipData 
          Title="Flip Wallpaper Horizontally"
          Content="If checked, the wallpaper will be flipped horizontally when cycled."
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.Effects.VFlip">
        <local:ToolTipData 
          Title="Flip Wallpaper Vertically"
          Content="If checked, the wallpaper will be flipped vertically when cycled."
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.Effects.MirrorLeft">
        <local:ToolTipData 
          Title="Mirror Wallpaper on the Left"
          Content="If checked, the wallpaper will have a mirror of iteself on its left side when cycled."
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.Effects.MirrorRight">
        <local:ToolTipData 
          Title="Mirror Wallpaper on the Right"
          Content="If checked, the wallpaper will have a mirror of iteself on its right side when cycled."
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.Effects.MirrorTop">
        <local:ToolTipData 
          Title="Mirror Wallpaper on the Top"
          Content="If checked, the wallpaper will have a mirror of iteself on its top side when cycled."
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.Effects.MirrorBottom">
        <local:ToolTipData 
          Title="Mirror Wallpaper on the Left"
          Content="If checked, the wallpaper will have a mirror of iteself on its bottom side when cycled."
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.ScreenCheckBox">
        <local:ToolTipData 
          Title="Cycle on This Screen"
          Content="Check to allow cycling of this wallpaper on this screen."
          IsMultiscreenFeature="True"
        />
      </ToolTip>
      
      <ToolTip x:Key="ToolTips.ScreenCheckBoxCloneAllCycleMode">
        <local:ToolTipData 
          Title="Cycle on This Screen"
          Content="Check to allow cycling of this wallpaper on this screen."
          NoteIcon="{StaticResource Global.Icons.Warning}"
          NoteText="This feature is disabled because the Wallpaper Cycling Mode is set to Clone All Monitors."
        />
      </ToolTip>
      
      <!-- Styles / Templates -->
      <Style x:Key="Footer.Button" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0,3,6,3" />
        <Setter Property="MinWidth" Value="80" />
      </Style>
      
      <Style x:Key="EditFieldPropertiesButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Content" Value="..." />
        <Setter Property="MaxWidth" Value="25" />
        <Setter Property="Margin" Value="2,4,2,4" />
        <Setter Property="Padding" Value="4,0,4,0" />
      </Style>
      
      <Style x:Key="{x:Static local:ScreenLayoutBox.ScreenRadioButtonStyleKey}" TargetType="{x:Type RadioButton}">
        <Setter Property="IsTabStop" Value="False" />
      
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RadioButton}">
              <Border 
                Name="outerBorder" 
                BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" BorderThickness="3"
              >
                <Border 
                  Name="innerBorder"
                  BorderBrush="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" BorderThickness="1"
                  Padding="5"
                >
                  <ContentPresenter />
                </Border>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      
      <Style x:Key="{x:Static local:ScreenLayoutBox.ScreenCheckBoxStyleKey}" TargetType="{x:Type CheckBox}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="ToolTip" Value="{StaticResource ToolTips.ScreenCheckBox}" />
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        <Setter Property="ToolTipService.ShowDuration" Value="13000" />
        
        <Style.Triggers>
          <DataTrigger 
            Binding="{Binding Source={x:Static Application.Current}, Path=Config.WallpaperChangeType}"
            Value="{x:Static Data:WallpaperChangeType.ChangeAllCloned}"
          >
            <Setter Property="ToolTip" Value="{StaticResource ToolTips.ScreenCheckBoxCloneAllCycleMode}" />
            <Setter Property="IsEnabled" Value="False" />
          </DataTrigger>

          <DataTrigger Binding="{Binding Source={x:Static Data:AppEnvironment.IsMultiscreenSystem}}" Value="False">
            <Setter Property="IsEnabled" Value="False" />
          </DataTrigger>
        </Style.Triggers>
      </Style>
    </ResourceDictionary>
  </Window.Resources>
  
  <Window.CommandBindings>
    <CommandBinding 
      Command="{x:Static local:ConfigWallpaperWindow.SelectImagePathCommand}" 
      CanExecute="SelectImagePathCommand_CanExecute" Executed="SelectImagePathCommand_Executed" 
    />
    
    <CommandBinding 
      Command="{x:Static local:ConfigWallpaperWindow.RemoveImagePathCommand}" 
      CanExecute="RemoveImagePathCommand_CanExecute" Executed="RemoveImagePathCommand_Executed" 
    />
    
    <CommandBinding 
      Command="{x:Static local:ConfigWallpaperWindow.SelectBackgroundColorCommand}" 
      CanExecute="SelectBackgroundColorCommand_CanExecute" Executed="SelectBackgroundColorCommand_Executed" 
    />
  </Window.CommandBindings>

  <!-- Taken Alt+X Keys: M,I,B,R,C,U,F,S,T,O,L,N -->
  <StackPanel Margin="5" Orientation="Vertical">
    <StackPanel Orientation="Horizontal">
      <StackPanel Orientation="Vertical">
        <local:ScreenLayoutBox
          x:Name="slbPreview"
          ScreensCheckStatus="{Binding Path=ConfigWallpaperVM.ScreensCycleState}"
          ScreenBackground="{Binding Path=WallpaperPreview}"
          Width="350" Height="170" 
          Padding="10" Margin="2" 
          ShowScreenNumbers="False" ShowScreenCheckBoxes="True"
          Background="Transparent"
        />

        <GroupBox Header="General" TabIndex="10" DataContext="{Binding Path=ConfigWallpaperVM}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition MinWidth="80" Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            
            <!-- 
              This control wraps the IsMultiscreen settings. The Content.
            -->
            <ContentControl x:Name="ctlMultiscreenSetting" Focusable="False" Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="2">
              <ContentControl.Resources>
                <StackPanel x:Key="ConfigureDefaultSettingsContent" Orientation="Horizontal">
                  <Label Content="Multiscreen wallpaper: " VerticalAlignment="Center" />
                  
                  <RadioButton 
                    Content="Auto" 
                    IsChecked="{Binding 
                      Path=IsMultiscreen, 
                      Converter={StaticResource Global.IsValueAsBooleanConverter}, 
                      ConverterParameter={x:Null},
                      Mode=TwoWay
                    }"
                    TabIndex="20" 
                    VerticalAlignment="Center"
                    ToolTip="{StaticResource ToolTips.General.MultiscreenWallpaper.Auto}"
                    Click="UpdatePreviewImage"
                  />
                  
                  <RadioButton 
                    Content="Yes" 
                    IsChecked="{Binding 
                      Path=IsMultiscreen, 
                      Converter={StaticResource Global.IsValueAsBooleanConverter}, 
                      ConverterParameter=True,
                      Mode=TwoWay
                    }"
                    TabIndex="30" 
                    VerticalAlignment="Center"
                    ToolTip="{StaticResource ToolTips.General.MultiscreenWallpaper.Yes}"
                    Click="UpdatePreviewImage"
                  />
                  
                  <RadioButton 
                    Content="No" 
                    IsChecked="{Binding 
                      Path=IsMultiscreen, 
                      Converter={StaticResource Global.IsValueAsBooleanConverter}, 
                      ConverterParameter=False,
                      Mode=TwoWay
                    }"
                    TabIndex="40" 
                    VerticalAlignment="Center"
                    ToolTip="{StaticResource ToolTips.General.MultiscreenWallpaper.No}"
                    Click="UpdatePreviewImage"
                  />
                </StackPanel>
                
                <CheckBox 
                  x:Key="ConfigureWallpapersContent"
                  Content="_Multiscreen Wallpaper" 
                  IsChecked="{Binding Path=IsMultiscreen, Mode=TwoWay}" 
                  HorizontalAlignment="Stretch"
                  Margin="5,5,0,3"
                  TabIndex="10"
                  ToolTip="{StaticResource ToolTips.General.MultiscreenWallpaper}"
                  Click="UpdatePreviewImage"
                />
              </ContentControl.Resources>
            </ContentControl>
            
            <!-- This element will be visible if the dialog is NOT in ConfigureDefaultSettings mode -->
            <Label 
              Name="lblGeneral_ImagePath" 
              Content="_Image Path: " 
              Target="{Binding ElementName=txtGeneral_ImagePath}"
              TabIndex="50" 
              Grid.Column="0" Grid.Row="1" 
            />
            <!-- This element will be visible if the dialog is NOT in ConfigureDefaultSettings mode -->
            <StackPanel Name="pnlGeneral_ImagePath" Orientation="Horizontal" Grid.Column="1" Grid.Row="1">
              <StackPanel.InputBindings>
                <KeyBinding Key="Delete" Command="{x:Static local:ConfigWallpaperWindow.RemoveImagePathCommand}" />
                <KeyBinding Key="Back" Command="{x:Static local:ConfigWallpaperWindow.RemoveImagePathCommand}" />
                <MouseBinding 
                  MouseAction="RightClick" Command="{x:Static local:ConfigWallpaperWindow.RemoveImagePathCommand}" 
                />
              </StackPanel.InputBindings>
              
              <TextBox 
                Name="txtGeneral_ImagePath"
                IsReadOnly="True"
                MinWidth="150" MaxWidth="250"
                ToolTip="{StaticResource ToolTips.General.ImagePath}"
                TabIndex="60"
              >
                <TextBox.Style>
                  <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                    <Setter Property="Text" Value="{Binding Path=ImagePath, Mode=OneWay}" />
                    
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding Path=ImagePath}" Value="{x:Null}">
                        <Setter Property="Text" Value="-different values-" />
                      </DataTrigger>
                      
                      <DataTrigger Binding="{Binding Path=HasImagePath}" Value="False">
                        <Setter Property="Text" Value="-no image-" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </TextBox.Style>
              </TextBox>
              
              <Button
                Name="btnGeneral_SelectImage" 
                TabIndex="70"
                Command="{x:Static local:ConfigWallpaperWindow.SelectImagePathCommand}"
                Style="{StaticResource EditFieldPropertiesButton}"
              />
            </StackPanel>
            
            <Label 
              Content="_Background: " 
              TabIndex="80"
              Target="{Binding ElementName=btnGeneral_SelectBackgroundColor}"
              Grid.Column="0" Grid.Row="2" 
            />
            <StackPanel Orientation="Horizontal" Grid.Column="1" Grid.Row="2">
              <TextBox 
                Name="txtGeneral_BackgroundColor" 
                MinWidth="70" 
                TabIndex="90" 
                ToolTip="{StaticResource ToolTips.General.Background}"
              >
                <TextBox.Text>
                  <Binding
                    Path="BackgroundColor" Mode="TwoWay" Converter="{StaticResource ColorToHtmlStringConverter}"
                    UpdateSourceTrigger="PropertyChanged"
                  >
                    <Binding.ValidationRules>
                      <StaticResource ResourceKey="ColorStringValidationRule" />
                    </Binding.ValidationRules>
                  </Binding>
                </TextBox.Text>
              </TextBox>
              <Button 
                Name="btnGeneral_SelectBackgroundColor"
                TabIndex="100"
                Command="{x:Static local:ConfigWallpaperWindow.SelectBackgroundColorCommand}"
                Style="{StaticResource EditFieldPropertiesButton}"
              />                  
            </StackPanel>

            <Label 
              Content="P_riority: " 
              TabIndex="110"
              Target="{Binding ElementName=txtGenereal_Priority}" 
              Grid.Column="0" Grid.Row="3"
            />
            <StackPanel Orientation="Horizontal" Grid.Column="1" Grid.Row="3">
              <Common.Windows.Controls:NumericTextBox 
                Name="txtGenereal_Priority"
                MinValue="1" MaxValue="100"
                DragValueSmall="1" DragValueLarge="5"
                AllowsRationalNumber="True"
                MaxWidth="50" MinWidth="40" 
                VerticalAlignment="Center"
                ToolTip="{StaticResource ToolTips.General.Priority}"
                TabIndex="120"
              >
                <TextBox.Text>
                  <Binding Path="Priority" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                      <Common.Presentation:NumberValidationRule AllowsRationalNumber="True" MinValue="1" MaxValue="100" />
                    </Binding.ValidationRules>
                  </Binding>
                </TextBox.Text>
              </Common.Windows.Controls:NumericTextBox>
              
              <TextBlock VerticalAlignment="Center" Text=" (0 to 100)" />
            </StackPanel>
          </Grid>
        </GroupBox>
        
        <GroupBox Header="Cycle Conditions" TabIndex="130" DataContext="{Binding Path=ConfigWallpaperVM}">
          <StackPanel Orientation="Horizontal">
            <Label Content="Only cycle between " VerticalAlignment="Center" />
            <Common.Windows.Controls:TimeSpanTextBox 
              Text="{Binding Path=OnlyCycleBetweenStart, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
              ToolTip="{StaticResource ToolTips.CycleConditions.OnlyCycleBetweenStart}"
              TabIndex="140" 
            />
            
            <Label Content="and" Margin="2,0,2,0" VerticalAlignment="Center" />
            <Common.Windows.Controls:TimeSpanTextBox 
              Text="{Binding Path=OnlyCycleBetweenStop, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
              ToolTip="{StaticResource ToolTips.CycleConditions.OnlyCycleBetweenStop}"
              TabIndex="150" 
            />
            <Label Content="." Margin="0,0,2,0" VerticalAlignment="Center" />
          </StackPanel>
        </GroupBox>
      </StackPanel>
      
      <StackPanel Orientation="Vertical" DataContext="{Binding Path=ConfigWallpaperVM}">
        <GroupBox Header="Placement" TabIndex="160">
          <StackPanel Orientation="Vertical"> 
            <StackPanel.Resources>
              <Style 
                TargetType="{x:Type Common.Windows.Controls:NumericTextBox}" 
                BasedOn="{StaticResource {x:Type Common.Windows.Controls:NumericTextBox}}"
              >
                <Setter Property="MaxWidth" Value="90" />
                <Setter Property="MinWidth" Value="70" />
                <Setter Property="VerticalAlignment" Value="Center" />
              </Style>
            </StackPanel.Resources>
            
            <UniformGrid Margin="4,2,4,2" Columns="2" Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="6">
              <RadioButton 
                Content="_Center"
                IsChecked="{Binding 
                  Path=Placement, 
                  Converter={StaticResource Global.IsValueAsBooleanConverter}, 
                  ConverterParameter={x:Static Data:WallpaperPlacement.Center},
                  Mode=TwoWay
                }"
                TabIndex="170"
                Click="UpdatePreviewImage"
              />
              
              <RadioButton 
                Content="_Uniform"
                IsChecked="{Binding 
                  Path=Placement, 
                  Converter={StaticResource Global.IsValueAsBooleanConverter}, 
                  ConverterParameter={x:Static Data:WallpaperPlacement.Uniform},
                  Mode=TwoWay
                }"
                TabIndex="180"
                Click="UpdatePreviewImage"
              />
              
              <RadioButton 
                Content="Uniform to _fill"
                IsChecked="{Binding 
                  Path=Placement, 
                  Converter={StaticResource Global.IsValueAsBooleanConverter}, 
                  ConverterParameter={x:Static Data:WallpaperPlacement.UniformToFill},
                  Mode=TwoWay
                }"
                TabIndex="190"
                Click="UpdatePreviewImage"
              />
              
              <RadioButton 
                Content="_Stretch"
                IsChecked="{Binding 
                  Path=Placement, 
                  Converter={StaticResource Global.IsValueAsBooleanConverter}, 
                  ConverterParameter={x:Static Data:WallpaperPlacement.Stretch},
                  Mode=TwoWay
                }"
                TabIndex="200"
                Click="UpdatePreviewImage"
              />
    
              <RadioButton 
                Content="_Tile"
                IsChecked="{Binding 
                  Path=Placement, 
                  Converter={StaticResource Global.IsValueAsBooleanConverter}, 
                  ConverterParameter={x:Static Data:WallpaperPlacement.Tile},
                  Mode=TwoWay
                }"
                TabIndex="210"
                Click="UpdatePreviewImage"
              />
              
              <!-- This element will only be visible if the dialog is in ConfigureDefaultSettings mode -->
              <RadioButton
                Name="rdbPlacement_AutoDetermine"
                Content="Auto determi_ne" 
                IsChecked="{Binding 
                  Path=Placement, 
                  Converter={StaticResource Global.IsValueAsBooleanConverter}, 
                  ConverterParameter={x:Null},
                  Mode=TwoWay
                }"
                Visibility="Collapsed"
                TabIndex="220"
                ToolTip="{StaticResource ToolTips.Placement.Auto}"
                Click="UpdatePreviewImage"
              />
            </UniformGrid>
            
            <StackPanel Orientation="Horizontal">
              <StackPanel.Resources>
                <Style 
                  TargetType="{x:Type Common.Windows.Controls:NumericTextBox}"
                  BasedOn="{StaticResource {x:Type Common.Windows.Controls:NumericTextBox}}"
                >
                  <Setter Property="MinValue" Value="-65535" />
                  <Setter Property="MaxValue" Value="65535" />
                  <Setter Property="DragValueSmall" Value="1" />
                  <Setter Property="DragValueLarge" Value="10" />
                </Style>
                
                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                  <Setter Property="Margin" Value="2,0,2,0" />
                  <Setter Property="VerticalAlignment" Value="Center" />
                </Style>
              </StackPanel.Resources>
            
              <Label 
                Content="Horizontal / Vertical _Offset: " 
                Target="{Binding ElementName=txtPlacement_HOffset}" 
                TabIndex="230" 
              />
              <Common.Windows.Controls:NumericTextBox 
                Name="txtPlacement_HOffset"
                TabIndex="240"
                ToolTip="{StaticResource ToolTips.Placement.HOffset}"
                DragEnd="UpdatePreviewImage"
              >
                <Binding Path="HorizontalOffset" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                  <Binding.ValidationRules>
                    <StaticResource ResourceKey="OffsetValidationRule" />
                  </Binding.ValidationRules>
                </Binding>
              </Common.Windows.Controls:NumericTextBox>
              <TextBlock Text=" / " />
              <Common.Windows.Controls:NumericTextBox 
                Name="txtPlacement_VOffset"
                TabIndex="250"
                ToolTip="{StaticResource ToolTips.Placement.VOffset}"
                DragEnd="UpdatePreviewImage"
              >
                <Binding Path="VerticalOffset" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                  <Binding.ValidationRules>
                    <StaticResource ResourceKey="OffsetValidationRule" />
                  </Binding.ValidationRules>
                </Binding>
              </Common.Windows.Controls:NumericTextBox>
            </StackPanel>
        
            <StackPanel Orientation="Horizontal">
              <StackPanel.Resources>
                <Style 
                  TargetType="{x:Type Common.Windows.Controls:NumericTextBox}"
                  BasedOn="{StaticResource {x:Type Common.Windows.Controls:NumericTextBox}}"
                >
                  <Setter Property="MinValue" Value="-99" />
                  <Setter Property="MaxValue" Value="5000" />
                  <Setter Property="DragValueSmall" Value="1" />
                  <Setter Property="DragValueLarge" Value="5" />
                  <Setter Property="MinWidth" Value="45" />
                </Style>
                
                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                  <Setter Property="Margin" Value="2,0,2,0" />
                  <Setter Property="VerticalAlignment" Value="Center" />
                </Style>
              </StackPanel.Resources>
              
              <Label 
                Content="Horizontal / Vertical Sca_le: "
                Target="{Binding ElementName=txtPlacement_HScale}" 
                TabIndex="260"
              />
              <Common.Windows.Controls:NumericTextBox 
                Name="txtPlacement_HScale"
                TabIndex="270"
                ToolTip="{StaticResource ToolTips.Placement.HScale}"
                DragEnd="UpdatePreviewImage"
              >
                <Binding Path="HorizontalScale" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                  <Binding.ValidationRules>
                    <StaticResource ResourceKey="ScaleValidationRule" />
                  </Binding.ValidationRules>
                </Binding>
              </Common.Windows.Controls:NumericTextBox>
              <TextBlock Text="%  / " />
              <Common.Windows.Controls:NumericTextBox 
                Name="txtPlacement_VScale"
                TabIndex="280"
                ToolTip="{StaticResource ToolTips.Placement.VScale}"
                DragEnd="UpdatePreviewImage"
              >
                <Binding Path="VerticalScale" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                  <Binding.ValidationRules>
                    <StaticResource ResourceKey="ScaleValidationRule" />
                  </Binding.ValidationRules>
                </Binding>
              </Common.Windows.Controls:NumericTextBox>
              <TextBlock Text="%" />
            </StackPanel>
          </StackPanel>
        </GroupBox>
        
        <GroupBox Header="Effects">
          <UniformGrid Columns="2">
            <CheckBox 
              IsChecked="{Binding Path=EffectFlipHorizontal, Mode=TwoWay}" 
              Content="Flip Horizontal" 
              ToolTip="{StaticResource ToolTips.Effects.HFlip}"
              TabIndex="290" 
              Click="UpdatePreviewImage"
            />
            <CheckBox 
              IsChecked="{Binding Path=EffectFlipVertical, Mode=TwoWay}" 
              Content="Flip Vertical" 
              ToolTip="{StaticResource ToolTips.Effects.VFlip}"
              TabIndex="300" 
              Click="UpdatePreviewImage"
            />
            <CheckBox 
              IsChecked="{Binding Path=EffectMirrorLeft, Mode=TwoWay}" 
              Content="Mirror left" 
              ToolTip="{StaticResource ToolTips.Effects.MirrorLeft}"
              TabIndex="305" 
              Click="UpdatePreviewImage"
            />
            <CheckBox 
              IsChecked="{Binding Path=EffectMirrorRight, Mode=TwoWay}" 
              Content="Mirror right" 
              ToolTip="{StaticResource ToolTips.Effects.MirrorRight}"
              TabIndex="306" 
              Click="UpdatePreviewImage"
            />
            <CheckBox 
              IsChecked="{Binding Path=EffectMirrorTop, Mode=TwoWay}" 
              Content="Mirror top" 
              ToolTip="{StaticResource ToolTips.Effects.MirrorTop}"
              TabIndex="310" 
              Click="UpdatePreviewImage"
            />
            <CheckBox 
              IsChecked="{Binding Path=EffectMirrorBottom, Mode=TwoWay}" 
              Content="Mirror bottom" 
              ToolTip="{StaticResource ToolTips.Effects.MirrorBottom}"
              TabIndex="320" 
              Click="UpdatePreviewImage"
            />
          </UniformGrid>
        </GroupBox>
      </StackPanel>
    </StackPanel>
    
    <!-- The "*Button_Click" methods just assign a DialogResult and closes the window. -->
    <StackPanel Style="{StaticResource Dialog.ButtonPanel}">
      <Button Content="Cancel" IsCancel="True" TabIndex="1001" />
      <Button Content="OK" IsDefault="True" TabIndex="1000" Command="{Binding Path=ConfigWallpaperVM.ApplySettingsCommand}" />
    </StackPanel>
  </StackPanel>
</Window>