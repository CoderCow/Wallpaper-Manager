<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common</name>
    </assembly>
    <members>
        <member name="T:Common.ExceptionHelper">
            <summary>
              Provides methods to help defining new <see cref="T:System.Exception"/> types.
            </summary>
        </member>
        <member name="M:Common.ExceptionHelper.GenerateString(System.Exception,System.String)">
            <summary>
              Generates a <see cref="T:System.String"/> describing an <see cref="T:System.Exception"/> object.
            </summary>
            <remarks>
              The generated <see cref="T:System.String"/> has the following content:
              <list type="number">
                <item>The full name of the <see cref="T:System.Exception"/> type.</item>
                <item>The <see cref="P:System.Exception.Message"/>.</item>
                <item>The message extension set by the parameter.</item>
                <item>The <see cref="P:System.Exception.InnerException"/>.</item>
                <item>The <see cref="P:System.Exception.StackTrace"/>.</item>
              </list>
              <para>
                The return value is almost equal to the output generated by Microsoft 
                <c>Exception.ToString()</c> methods.
              </para>
            </remarks>
            <returns>
              A <see cref="T:System.String"/> object, desribing the <see cref="T:System.Exception"/>.
            </returns>
            <overloaded>
              Generates a <see cref="T:System.String"/> describing an <see cref="T:System.Exception"/> object.
            </overloaded>
            <param name="exception">
              The exception object reference.
            </param>
            <param name="messageExtension">
              The message extension which gets simply appended to the message.
            </param>
        </member>
        <member name="T:Common.SmartWeakEvent`1">
            <summary>
            A class for managing a weak event.
            </summary>
        </member>
        <member name="T:Common.Serialization.ISerializationProvider">
            <summary>
              Represents a general provider for the serialization of objects.
            </summary>
        </member>
        <member name="M:Common.Serialization.ISerializationProvider.Serialize(System.String,System.Object)">
            <summary>
              Serializes a new element with the given name and value.
            </summary>
            <param name="elementName">
              The name of the element to be added to the serialized data.
            </param>
            <param name="value">
              The value of the element.
            </param>
        </member>
        <member name="M:Common.Serialization.ISerializationProvider.SerializeAll">
            <summary>
              Serializes all members of the type.
            </summary>
        </member>
        <member name="T:Common.IO.Path">
            <summary>
              Represents a path refering to a file or directory in the file system.
            </summary>
            <remarks>
              <para>
                This structure represents a single file or directory path in the local or on a remote file system which can be either 
                relative or absolute, normalized or not. It does not support multiple paths at once, path patterns which contain 
                wildcards or a path pointing to a physical device (like <c>\\.\PHYSICALDRIVE0</c>).
              </para>
              <para>
                The advantage of using this structure over raw <see cref="T:System.String"/> objects is that the path string is fully 
                validated when its assigned to this structure and therefore does not require any more validation by methods
                using it, so its validated only one time in the whole call stack which saves redudant code and performance.
              </para>
              <para>
                It is recommended to use methods provided by this structure to get sub-parts of its represented path, such as the
                parent or root directory because the performance of is significantly increased compared to the native methods 
                and classes provided by the .NET Framework, also path structures created by this type are always valid and therefore 
                skip the validation process. 
              </para>
              <para>
                Use the path structure returned by the <see cref="P:Common.IO.Path.None"/> property or by using <c>default(Path)</c> to indicate an
                empty path object. Note that all properties and methods of an empty path will throw a <see cref="T:Common.PathException"/>.
              </para>
            </remarks>
            <seealso cref="T:Common.PathException">PathException Class</seealso>
        </member>
        <member name="F:Common.IO.Path.pathCheckIsNotNormalizedRegex">
            <summary>
              The <see cref="T:System.Text.RegularExpressions.Regex"/> used to check whether a path is normalized or not.
            </summary>
        </member>
        <member name="F:Common.IO.Path.value">
            <summary>
              The path string representing the value of this structure.
            </summary>
        </member>
        <member name="F:Common.IO.Path.invalidFileNameChars">
            <summary>
              <inheritdoc cref="P:Common.IO.Path.InvalidFileNameChars" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.IO.Path.invalidPathChars">
            <summary>
              <inheritdoc cref="P:Common.IO.Path.InvalidPathChars" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.IO.Path.hasParentDirectory">
            <summary>
              <inheritdoc cref="P:Common.IO.Path.HasParentDirectory" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.IO.Path.isRelative">
            <summary>
              <inheritdoc cref="P:Common.IO.Path.IsRelative" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.IO.Path.isNormalized">
            <summary>
              <inheritdoc cref="P:Common.IO.Path.IsNormalized" select="../value/node()"/>
            </summary>
        </member>
        <member name="M:Common.IO.Path.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
              Initializes the <see cref="T:Common.IO.Path"/> structure with a path value which is expected to be a valid path.
            </summary>
            <remarks>
              <para>
                If you plan to combine multiple strings or other <see cref="T:Common.IO.Path"/> object to one path use the either the 
                <see cref="M:Common.IO.Path.Concat(System.String[])"/> or <see cref="M:Common.IO.Path.Concat(Common.IO.Path[])"/> method.
              </para>
            </remarks>
            <param name="value">
              The path string representing the path.
            </param>
            <param name="isRelative">
              A <see cref="T:System.Boolean"/> indicating whether the new path is relative or not.
            </param>
            <param name="isValidated">
              Always has to be <c>false</c>. If you want path validation use the other constructor.
            </param>
            <seealso cref="M:Common.IO.Path.Concat(System.String[])">Concat(String) Method</seealso>
            <seealso cref="M:Common.IO.Path.Concat(Common.IO.Path[])">Concat(Path) Method</seealso>
        </member>
        <member name="M:Common.IO.Path.#ctor(System.String,System.Boolean)">
            <summary>
              Initializes the <see cref="T:Common.IO.Path"/> structure with the given <paramref name="value"/> used as path string.
            </summary>
            <remarks>
              <para>
                The constructor uses the <see cref="M:System.IO.Path.GetFullPath(System.String)"/> function internally which accesses the file 
                system to check the security behaviour of an absolute path. For more documentation refer to the
                <see cref="M:System.IO.Path.GetFullPath(System.String)">System.IO.Path.GetFullPath Method</see>.
              </para>
            </remarks>
            <param name="value">
              The path string representing the path.
            </param>
            <param name="getFullPath">
              A <see cref="T:System.Boolean"/> indicating whether the absolute path should be resolved for the given path string.
            </param>
            <exception cref="T:System.ArgumentException">
              The given <paramref name="value"/> represents an invalid path because it's either empty, contains white spaces only,
              contains invalid characters, is a path to directly to a physical drive or has an invalid structure.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
              <paramref name="value"/> is an absolute path and is too long or <paramref name="getFullPath"/> is <c>true</c> and 
              the resolved path is too long. A valid path may be at most 247 characters long, a valid file name 259 characters.
            </exception>
            <exception cref="T:System.Security.SecurityException">
              <paramref name="value"/> is an absolute path or <paramref name="getFullPath"/> is <c>true</c> and the file where 
              this path refers to does exist in the file system and the caller is missing the 
              <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery"/> right to access the full path of this file.
            </exception>
            <permission cref="T:System.Security.Permissions.FileIOPermission">
              <see cref="T:System.Security.Permissions.FileIOPermission"/> for access to the path. 
              Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery"/>.
            </permission>
            <seealso cref="M:System.IO.Path.GetFullPath(System.String)">System.IO.Path.GetFullPath Method</seealso>.
            <seealso cref="T:System.Security.Permissions.FileIOPermissionAccess">FileIOPermissionAccess Enumeration</seealso>
        </member>
        <member name="M:Common.IO.Path.op_Addition(Common.IO.Path,Common.IO.Path)">
            <summary>
              Concats two <see cref="T:Common.IO.Path"/> objects to a new one, separating them with a <see cref="P:Common.IO.Path.DirectorySeparator"/>.
            </summary>
            <remarks>
              If one of both provided <see cref="T:Common.IO.Path"/> objects is <see cref="P:Common.IO.Path.None"/>, then the one which is not 
              <see cref="P:Common.IO.Path.None"/> will be returned. If both provided <see cref="T:Common.IO.Path"/> objects are <see cref="P:Common.IO.Path.None"/>, then
              <see cref="P:Common.IO.Path.None"/> will be returned aswell.
            </remarks>
            <param name="path1">
              The first <see cref="T:Common.IO.Path"/> to be concat.
            </param>
            <param name="path2">
              The second <see cref="T:Common.IO.Path"/> to be concat.
            </param>
            <returns>
              The resulting concatenated <see cref="T:Common.IO.Path"/>.
            </returns>
            <exception cref="T:Common.PathException">
              <paramref name="path2"/> is a rooted path.
            </exception>
        </member>
        <member name="M:Common.IO.Path.op_Addition(Common.IO.Path,System.String)">
            <summary>
              Concats a <see cref="T:Common.IO.Path"/> object with a <see cref="T:System.String"/> and creates a new <see cref="T:Common.IO.Path"/> object by
              separating them with a <see cref="P:Common.IO.Path.DirectorySeparator"/>.
            </summary>
            <remarks>
              If <paramref name="path"/> is <see cref="P:Common.IO.Path.None"/>, then the method will try to use the <paramref name="pathString"/>
              to create the new <see cref="T:Common.IO.Path"/> object.
            </remarks>
            <param name="path">
              The <see cref="T:Common.IO.Path"/> to be concat.
            </param>
            <param name="pathString">
              The string to be concat with the <see cref="T:Common.IO.Path"/>.
            </param>
            <returns>
              The resulting concatenated <see cref="T:Common.IO.Path"/>.
            </returns>
            <exception cref="T:Common.PathException">
              The built path is invalid. See its inner exception for details.
            </exception>
        </member>
        <member name="M:Common.IO.Path.op_Addition(System.String,Common.IO.Path)">
            <summary>
              Concats a <see cref="T:System.String"/> with a <see cref="T:Common.IO.Path"/> objects and creates a new <see cref="T:Common.IO.Path"/> object by
              separating them with a <see cref="P:Common.IO.Path.DirectorySeparator"/>.
            </summary>
            <exception cref="T:Common.PathException">
              <paramref name="path"/> is rooted or the built path is invalid.
            </exception>
            <inheritdoc/>
        </member>
        <member name="M:Common.IO.Path.op_Implicit(Common.IO.Path)~System.String">
            <summary>
              Implicitly converts <see cref="T:Common.IO.Path"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="path">
              The <see cref="T:Common.IO.Path"/> to convert.
            </param>
            <returns>
              The <see cref="T:System.String"/> containing the path.
            </returns>
        </member>
        <member name="M:Common.IO.Path.op_Explicit(System.String)~Common.IO.Path">
            <summary>
              Explicitly converts <see cref="T:System.String"/> to <see cref="T:Common.IO.Path"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.String"/> to convert.
            </param>
            <returns>
              The converted <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:Common.PathException">
              <paramref name="value"/> is not a valid path. See inner exception for more details.
            </exception>
        </member>
        <member name="M:Common.IO.Path.Concat(Common.IO.Path[])">
            <summary>
              Combines multiple <see cref="T:Common.IO.Path"/> structures to one by separating them with <see cref="P:Common.IO.Path.DirectorySeparator"/> 
              characters.
            </summary>
            <remarks>
              The <see cref="T:Common.IO.Path"/> objects may either be all relative paths or the first <see cref="T:Common.IO.Path"/> in the array may be
              a rooted path. If the array contains multiple rooted paths or a relative path is provided before a rooted path or a
              <see cref="T:Common.IO.Path"/> is <see cref="P:Common.IO.Path.None"/>, then a <see cref="T:Common.PathException"/> is thrown.
            </remarks>
            <param name="paths">
              The <see cref="T:Common.IO.Path"/> structures to be combined.
            </param>
            <returns>
              The new combined <see cref="T:Common.IO.Path"/> structure.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="paths"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="paths"/> is an empty array.
            </exception>
            <exception cref="T:Common.PathException">
              A <see cref="T:Common.IO.Path"/> is rooted but its not the first element in the array or the array contains multiple rooted 
              paths or a <see cref="P:Common.IO.Path.None"/> path.
            </exception>
            <seealso cref="T:Common.PathException">PathException Class</seealso>
            
            <overloads>
              <summary>
                Combines multiple path elements to one new <see cref="T:Common.IO.Path"/> object by separating them with 
                <see cref="P:Common.IO.Path.DirectorySeparator"/> characters.
              </summary>
            </overloads>
        </member>
        <member name="M:Common.IO.Path.Concat(System.String[])">
            <summary>
              Combines multiple <see cref="T:System.String"/> objects to one new <see cref="T:Common.IO.Path"/> object by separating them with 
              <see cref="P:Common.IO.Path.DirectorySeparator"/> characters.
            </summary>
            <param name="pathStrings">
              The <see cref="T:System.String"/> objects to be combined.
            </param>
            <returns>
              The new combined <see cref="T:Common.IO.Path"/> structure.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="pathStrings"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="pathStrings"/> is an empty array.
            </exception>
            <exception cref="T:System.ArgumentException">
              The <paramref name="pathStrings"/> array contains either a <c>null</c> or empty <see cref="T:System.String"/>.
            </exception>
            <exception cref="T:Common.PathException">
              The built path is invalid. See its inner exception for details.
            </exception>
            <seealso cref="T:Common.PathException">PathException Class</seealso>
        </member>
        <member name="M:Common.IO.Path.GetParentDirInternal(System.String)">
            <summary>
              Retrieves the parent directory of the given path string while considering relative path patterns like "\.." and "\.".
            </summary>
            <remarks>
              The given <paramref name="path"/> is not validated by this method.
            </remarks>
            <param name="path">
              The path to get the parent directory path of.
            </param>
            <returns>
              A <see cref="T:System.String"/> containing the path of the parent directory or <c>null</c> if no parent directory was found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="path"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Common.IO.Path.IsRootOnlyNetworkPath(System.String)">
            <summary>
              Checks whether a given path string is a network path with a root definition only.
            </summary>
            <remarks>
              The given <paramref name="path"/> is not validated or trimmed by this method.
            </remarks>
            <param name="path">
              The path to check.
            </param>
            <returns>
              A <see cref="T:System.Boolean"/> indicating whether this path is a network path with a root definition only or not.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="path"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Common.IO.Path.IsDirectorySeparator(System.Char)">
            <summary>
              Checks whether a character is <see cref="P:Common.IO.Path.DirectorySeparator"/> or <see cref="P:Common.IO.Path.AltDirectorySeparator"/>.
            </summary>
            <param name="character">
              The character to be checked.
            </param>
            <returns>
              A <see cref="T:System.Boolean"/> indicating if <paramref name="character"/> is either 
              <see cref="P:Common.IO.Path.DirectorySeparator"/> or <see cref="P:Common.IO.Path.AltDirectorySeparator"/>.
            </returns>
        </member>
        <member name="M:Common.IO.Path.GetFullPath">
            <summary>
              Gets the absolute path of the path represented by this structure.
            </summary>
            <remarks>
              <para>
                This method uses the <see cref="M:System.IO.Path.GetFullPath(System.String)"/> function internally which accesses the file system
                to check the security behaviour of the absolute path. For more documentation refer to the
                <see cref="M:System.IO.Path.GetFullPath(System.String)">System.IO.Path.GetFullPath Method</see>.
              </para>
              <para>
                It is recommended to use this methods to get the full path instead of creating a new <see cref="T:Common.IO.Path"/> structure
                object on your own, because no path validation is perfromed for paths created internally by this structure.
              </para>
            </remarks>
            <exception cref="T:Common.PathException">
              The system could not retrieve the absolute path or the path is <see cref="P:Common.IO.Path.None"/>.
            </exception>
            <exception cref="T:System.Security.SecurityException">
              The file where this path refers to does exist in the file system and the caller is missing the 
              <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery"/> right to access the full path of this file.
            </exception>
            <permission cref="T:System.Security.Permissions.FileIOPermission">
              <see cref="T:System.Security.Permissions.FileIOPermission"/> for access to the path. 
              Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery"/>.
            </permission>
            <exception cref="T:System.IO.PathTooLongException">
              The resolved path is too long. A valid path may be at most 247 characters long, a valid file name 259 characters.
            </exception>
            <seealso cref="M:System.IO.Path.GetFullPath(System.String)">System.IO.Path.GetFullPath Method</seealso>
            <seealso cref="T:System.Security.Permissions.FileIOPermissionAccess">FileIOPermissionAccess Enumeration</seealso>
        </member>
        <member name="M:Common.IO.Path.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Common.IO.Path.ToString">
            <inheritdoc />
        </member>
        <member name="M:Common.IO.Path.CompareTo(Common.IO.Path)">
            <inheritdoc />
        </member>
        <member name="M:Common.IO.Path.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Common.IO.Path.Equals(Common.IO.Path)">
            <inheritdoc />
        </member>
        <member name="M:Common.IO.Path.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Common.IO.Path.None">
            <summary>
              Gets the empty <see cref="T:Common.IO.Path"/> structure representation. This is equal to <c>default(Path)</c>.
            </summary>
            <value>
              The empty <see cref="T:Common.IO.Path"/> structure representation.
            </value>
        </member>
        <member name="P:Common.IO.Path.InvalidFileNameChars">
            <summary>
              Gets an array of characters that are not allowed in file names.
            </summary>
            <remarks>
              The value of this property is cached after the get-accessor has been called the first time.
            </remarks>
            <value>
              An array of characters that are not allowed in file names.
            </value>
        </member>
        <member name="P:Common.IO.Path.InvalidPathChars">
            <summary>
              Gets an array of characters that are not allowed in paths.
            </summary>
            <remarks>
              The value of this property is cached after the get-accessor has been called the first time.
            </remarks>
            <value>
              An array of characters that are not allowed in paths.
            </value>
        </member>
        <member name="P:Common.IO.Path.PathSeparator">
            <summary>
              Gets the character for separating paths in environment variables.
            </summary>
            <value>
              The character for separating paths in environment variables.
            </value>
        </member>
        <member name="P:Common.IO.Path.VolumeSeparator">
            <summary>
              Gets the character used to separate the volume character from the path.
            </summary>
            <value>
              The character used to separate the volume character from the path.
            </value>
        </member>
        <member name="P:Common.IO.Path.DirectorySeparator">
            <summary>
              Gets the character used to separate multiple directories in a path.
            </summary>
            <value>
              The character used to separate multiple directories in a path.
            </value>
            <seealso cref="P:Common.IO.Path.AltDirectorySeparator">AltDirectorySeparator Property</seealso>
        </member>
        <member name="P:Common.IO.Path.AltDirectorySeparator">
            <summary>
              Gets the alternative character used to separate multiple directories in a path.
            </summary>
            <value>
              The alternative character used to separate multiple directories in a path.
            </value>
            <seealso cref="P:Common.IO.Path.DirectorySeparator">DirectorySeparator Property</seealso>
        </member>
        <member name="P:Common.IO.Path.RootDirectory">
            <summary>
              Gets the <see cref="T:Common.IO.Path"/> of the root directory of this path.
            </summary>
            <remarks>
              <para>
                If no root directory is found, because this path is a relative path, then a <see cref="T:Common.PathException"/> is thrown.
              </para>
              <para>
                It is recommended to use this property to get the root path instead of creating a new <see cref="T:Common.IO.Path"/> structure
                object on your own, because no path validation is perfromed for paths created internally by this structure.
              </para>
            </remarks>
            <value>
              The <see cref="T:Common.IO.Path"/> of the root directory of this path.
            </value>
            <exception cref="T:Common.PathException">
              The path is relative or <see cref="P:Common.IO.Path.None"/>.
            </exception>
            <seealso cref="T:Common.PathException">PathException Class</seealso>
        </member>
        <member name="P:Common.IO.Path.ParentDirectory">
            <summary>
              Gets the <see cref="T:Common.IO.Path"/> of the parent directory.
            </summary>
            <remarks>
              <para>
                If this path referes to a file, the directory containing that file will be returned. If no parent directory is 
                found, because the path referes to the root directory of an volume or a relative path defines no more directories 
                on its left side, then a <see cref="T:Common.PathException"/> is thrown.
              </para>
              <para>
                It is recommended to use this property to get the parent path instead of creating a new <see cref="T:Common.IO.Path"/> 
                structure object on your own, because no path validation is perfromed for paths created internally by this structure.
              </para>
            </remarks>
            <value>
              The <see cref="T:Common.IO.Path"/> of the parent directory.
            </value>
            <exception cref="T:Common.PathException">
              The path has no parent directory or is <see cref="P:Common.IO.Path.None"/>.
            </exception>
            <seealso cref="P:Common.IO.Path.None">None Property</seealso>
            <seealso cref="T:Common.PathException">PathException Class</seealso>
        </member>
        <member name="P:Common.IO.Path.FileName">
            <summary>
              Gets the a new path containing the name of the file with its extension where this path refers to.
            </summary>
            <remarks>
              If the path refers to a directory, the directory name will be returned. If this path is <see cref="P:Common.IO.Path.None"/> then a
              <see cref="T:Common.PathException"/> will be thrown.
            </remarks>
            <value>
              The name of the file where this path refers to.
            </value>
            <exception cref="T:Common.PathException">
              The path is <see cref="P:Common.IO.Path.None"/>.
            </exception>
            <seealso cref="T:Common.PathException">PathException Class</seealso>
        </member>
        <member name="P:Common.IO.Path.FileNameWithoutExt">
            <summary>
              Gets the a new path containing the name of the file without its extension where this path refers to.
            </summary>
            <remarks>
              If the path refers to a directory, the directory name will be returned. If this path is <see cref="P:Common.IO.Path.None"/> then a
              <see cref="T:Common.PathException"/> will be thrown.
            </remarks>
            <value>
              The a new path containing the name of the file without its extension where this path refers to.
            </value>
            <exception cref="T:Common.PathException">
              The path is <see cref="P:Common.IO.Path.None"/>.
            </exception>
            <seealso cref="T:Common.PathException">PathException Class</seealso>
        </member>
        <member name="P:Common.IO.Path.HasParentDirectory">
            <summary>
              Gets a <see cref="T:System.Boolean"/> indicating whether this path represents a single file system element or not.
            </summary>
            <value>
              A <see cref="T:System.Boolean"/> indicating whether this path represents a single file system element or not.
            </value>
            <exception cref="T:Common.PathException">
              The path is <see cref="P:Common.IO.Path.None"/>.
            </exception>
            <seealso cref="P:Common.IO.Path.None">None Property</seealso>
            <seealso cref="T:Common.PathException">PathException Class</seealso>
        </member>
        <member name="P:Common.IO.Path.IsRelative">
            <summary>
              Gets a <see cref="T:System.Boolean"/> indicating whether this path is relative or a rooted path.
            </summary>
            <value>
              A <see cref="T:System.Boolean"/> indicating whether this path is relative or a rooted path.
            </value>
            <exception cref="T:Common.PathException">
              The path is <see cref="P:Common.IO.Path.None"/>.
            </exception>
            <seealso cref="P:Common.IO.Path.None">None Property</seealso>
            <seealso cref="T:Common.PathException">PathException Class</seealso>
        </member>
        <member name="P:Common.IO.Path.IsNormalized">
            <summary>
              Gets a <see cref="T:System.Boolean"/> indicating whether the path is normalized or not.
            </summary>
            <value>
              A <see cref="T:System.Boolean"/> indicating whether the path is normalized or not.
            </value>
            <exception cref="T:Common.PathException">
              The path is <see cref="P:Common.IO.Path.None"/>.
            </exception>
            <seealso cref="P:Common.IO.Path.None">None Property</seealso>
            <seealso cref="T:Common.PathException">PathException Class</seealso>
        </member>
        <member name="P:Common.IO.Path.Length">
            <summary>
              Gets the zero based length of the path.
            </summary>
            <value>
              The zero based length of the path. <c>0</c> if the path is <see cref="P:Common.IO.Path.None"/>.
            </value>
        </member>
        <member name="T:Common.Text.CommandParser">
            <threadsafety static="false" instance="false" />
        </member>
        <member name="F:Common.Text.CommandParser.parseSettings">
            <summary>
              <inheritdoc cref="P:Common.Text.CommandParser.ParseSettings" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Text.CommandParser.parameterParser">
            <summary>
              <inheritdoc cref="P:Common.Text.CommandParser.ParameterParser" select="../value/node()"/>
            </summary>
        </member>
        <member name="P:Common.Text.CommandParser.ParseSettings">
            <summary>
              Gets the settings for command parsing.
            </summary>
            <value>
              The settings for command parsing.
            </value>
        </member>
        <member name="P:Common.Text.CommandParser.ParameterParser">
            <summary>
              Gets the parser used to parse the command's parameter set.
            </summary>
            <value>
              The parser used to parse the command's parameter set.
            </value>
        </member>
        <member name="T:Common.Serialization.XmlSerializer`1">
            <inheritdoc/>
            <summary>
              Used to serialize or deserialize types marked with the <see cref="T:Common.Serialization.XmlSerializableAttribute"/>.
            </summary>
            <remarks>
              This is a custom implementation of Microsoft's <see cref="T:System.Xml.Serialization.XmlSerializer"/> and has the 
              following advantages:
              <list type="bullet">
                <item>
                  <description>
                    Instead of defining which members should not be serialized, define which members should de serialized.
                  </description>
                </item>
                <item>
                  <description>Serialization of properties and fields regardless of their access modifier.</description>
                </item>
                <item>
                  <description>Version controlled serialization without the use of custom code.</description>
                </item>
                <item>
                  <description>Better custom serialization support.</description>
                </item>
              </list>
            </remarks>
            <seealso cref="T:Common.Serialization.XmlSerializableAttribute">XmlSerializableAttribute Class</seealso>
            <threadsafety static="true" instance="false"/>
            <inheritdoc/>
        </member>
        <member name="F:Common.Serialization.XmlSerializer`1.subSerializers">
            <summary>
              A cache of XmlSerializer instances used for sub types to be serialized.
            </summary>
            <remarks>
              Note that this dictionary will also be modified by the sub serializers theirselfes.
            </remarks>
        </member>
        <member name="F:Common.Serialization.XmlSerializer`1.targetTypeType">
            <summary>
              <inheritdoc cref="P:Common.Serialization.XmlSerializer`1.TargetTypeType" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Serialization.XmlSerializer`1.rootName">
            <summary>
              <inheritdoc cref="P:Common.Serialization.XmlSerializer`1.RootName" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Serialization.XmlSerializer`1.xmlNamespace">
            <summary>
              <inheritdoc cref="P:Common.Serialization.XmlSerializer`1.XmlNamespace" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Serialization.XmlSerializer`1.collectionItemMemberAttributes">
            <summary>
              <inheritdoc cref="P:Common.Serialization.XmlSerializer`1.CollectionItemMemberAttributes" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Serialization.XmlSerializer`1.serializableMembers">
            <summary>
              <inheritdoc cref="P:Common.Serialization.XmlSerializer`1.SerializableMembers" select="../value/node()"/>
            </summary>
        </member>
        <member name="M:Common.Serialization.XmlSerializer`1.#ctor(System.Type,System.Collections.Generic.Dictionary{System.Type,Common.Serialization.XmlSerializer{System.Object}})">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Serialization.XmlSerializer`1">XmlSerializer Class</see> as sub serializer.
            </summary>
            <remarks>
              Use this constructor only to create a sub serializer.
            </remarks>
            <param name="subType">
              The type to be serialized / deserialized.
            </param>
            <param name="subSerializers">
              The dictionary holding cached sub serializers of the root serializer.
            </param>
        </member>
        <member name="M:Common.Serialization.XmlSerializer`1.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Serialization.XmlSerializer`1">XmlSerializer Class</see> and pre-caches 
              beside of the types defined by the serialization attributes also the given extra types.
            </summary>
            <param name="extraTypes">
              A collection of extra types to pre-cache reflection data for.
            </param>
            <exception cref="T:System.Security.SecurityException">
              Missing access to reflect member data.
            </exception>
            <permission cref="T:System.Security.Permissions.ReflectionPermission">
              Required to reflect member data. Associated flags: 
              <see cref="T:System.Security.Permissions.ReflectionPermissionFlag"/>.<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess"/>.
            </permission>
            <seealso cref="T:Common.Serialization.ICustomSerialized">ICustomSerialized Interface</seealso>
            <seealso cref="T:System.Security.Permissions.ReflectionPermission">ReflectionPermission Class</seealso>
            <seealso cref="T:System.Security.Permissions.ReflectionPermissionFlag">ReflectionPermissionFlag Enumeration</seealso>
            <seealso cref="T:System.Type">Type Class</seealso>
            
            <overloads>
              <summary>
                Initializes a new instance of the <see cref="T:Common.Serialization.XmlSerializer`1">XmlSerializer Class</see> and pre-caches 
                the types defined by the serialization attributes.
              </summary>
            </overloads>
        </member>
        <member name="M:Common.Serialization.XmlSerializer`1.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Common.Serialization.XmlSerializer`1.GetSubSerializer(System.Type)">
            <summary>
              Gets a sub XML Serializer for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
              The <see cref="T:System.Type"/> to get a sub serializer for.
            </param>
            <returns>
              The sub XML Serializer for the given <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Common.Serialization.XmlSerializer`1.Serialize(`0,System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{Common.Serialization.XmlDataCollectionMemberAttribute})">
            <summary>
              Serializes the given instance into XML-data by using the given <see cref="T:System.Xml.XmlWriter"/> and extends the usual
              collection member attributes with the given ones.
            </summary>
            <remarks>
              
            </remarks>
            <param name="instance">
              The object instance to be serialized.
            </param>
            <param name="xmlWriter">
              The <see cref="T:System.Xml.XmlWriter"/> instance being used to write the XML data.
            </param>
            <param name="collectionMemberOverrides">
              A collection of <see cref="T:Common.Serialization.XmlDataCollectionMemberAttribute"/> instances defining further attributes to extend
              the default <see cref="P:Common.Serialization.XmlSerializer`1.CollectionItemMemberAttributes"/> or replace them.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="instance"/> or <paramref name="xmlWriter"/> is <c>null</c>.
            </exception>
            
            <overloads>
              <summary>
                Serializes the given instance into XML-data by using the given <see cref="T:System.Xml.XmlWriter"/>.
              </summary>
            </overloads>
        </member>
        <member name="M:Common.Serialization.XmlSerializer`1.Deserialize(System.Xml.XmlReader,System.Collections.Generic.IEnumerable{Common.Serialization.XmlDataCollectionMemberAttribute})">
            <summary>
              Deserializes the XML data read by the given <see cref="T:System.Xml.XmlReader"/> into a new object instance and extends the usual
              collection member attributes with the given ones.
            </summary>
            <remarks>
              
            </remarks>
            <param name="xmlReader">
              The <see cref="T:System.Xml.XmlReader"/> instance being used to read the XML data.
            </param>
            <param name="collectionMemberOverrides">
              A collection of <see cref="T:Common.Serialization.XmlDataCollectionMemberAttribute"/> instances defining further attributes to extend
              the default <see cref="P:Common.Serialization.XmlSerializer`1.CollectionItemMemberAttributes"/> or replace them.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="xmlReader"/> is <c>null</c>.
            </exception>
            
            <overloads>
              <summary>
                Deserializes the XML data read by the given <see cref="T:System.Xml.XmlReader"/> into a new object instance.
              </summary>
            </overloads>
        </member>
        <member name="M:Common.Serialization.XmlSerializer`1.Deserialize(System.Xml.XmlReader)">
            <summary>
              Deserializes the XML data read by the given <see cref="T:System.Xml.XmlReader"/> into a new object instance.
            </summary>
            <remarks>
              
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="xmlReader"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Common.Serialization.XmlSerializer`1.TargetTypeType">
            <summary>
              Gets the type to be serialized or deserialized.
            </summary>
            <value>
              The type to be serialized or deserialized.
            </value>
        </member>
        <member name="P:Common.Serialization.XmlSerializer`1.RootName">
            <summary>
              Gets the desired name of the root element in the XML-Data.
            </summary>
            <value>
              The desired name of the root element in the XML-Data.
            </value>
        </member>
        <member name="P:Common.Serialization.XmlSerializer`1.XmlNamespace">
            <summary>
              Gets the desired namespace of the root element in the XML-Data.
            </summary>
            <value>
              The desired namespace of the root element in the XML-Data.
            </value>
        </member>
        <member name="P:Common.Serialization.XmlSerializer`1.CollectionItemMemberAttributes">
            <summary>
              Gets the dictionary containing the member attributes for collection items.
            </summary>
            <value>
              The dictionary containing the member attributes for collection items.
            </value>
        </member>
        <member name="P:Common.Serialization.XmlSerializer`1.SerializableMembers">
            <summary>
              Gets the collection containing the serializable members of this type.
            </summary>
            <value>
              The collection containing the serializable members of this type.
            </value>
        </member>
        <member name="T:Common.Serialization.XmlSerializer`1.DeserializationProvider`1">
            <summary>
              Description
            </summary>
            <remarks>
              
            </remarks>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Common.Serialization.IDeserializationProvider">
            <summary>
              Represents a general provider for the deserialization of objects.
            </summary>
        </member>
        <member name="M:Common.Serialization.IDeserializationProvider.Deserialize(System.String)">
            <summary>
              Deserializes a specific member of the type by using its given metadata.
            </summary>
            <param name="memberName">
              The name of the member to be deserialized.
            </param>
            <returns>
              The deserialized object.
            </returns>
            <exception cref="T:System.ArgumentException">
              The type does not define the given <paramref name="memberName"/>.
            </exception>
        </member>
        <member name="M:Common.Serialization.IDeserializationProvider.DeserializeAs``1(System.String)">
            <summary>
              Deserializes a specific element from the given soure data.
            </summary>
            <typeparam name="DestType">
              The type to be deserialized.
            </typeparam>
            <param name="elementName">
              The element name to be deserialized.
            </param>
            <returns>
              The deserialized object.
            </returns>
        </member>
        <member name="M:Common.Serialization.IDeserializationProvider.DeserializeAll(System.Boolean,System.Boolean)">
            <summary>
              Deserializes all members of the type.
            </summary>
            <param name="throwExceptions">
              A <see cref="T:System.Boolean"/> indicating whether the deserialization provider should throw exceptions or not.
            </param>
            <param name="deserializePrevious">
              A <see cref="T:System.Boolean"/> indicating whether previous deserialized members should be deserialized again or not.
            </param>
        </member>
        <member name="F:Common.Serialization.XmlSerializer`1.DeserializationProvider`1.serializer">
            <summary>
              <inheritdoc cref="P:Common.Serialization.XmlSerializer`1.DeserializationProvider`1.Serializer" select="../value/node()"/>
            </summary>
        </member>
        <member name="M:Common.Serialization.XmlSerializer`1.DeserializationProvider`1.#ctor(Common.Serialization.XmlSerializer{`1})">
            <summary>
              Initializes a new instance of the 
              <see cref="T:Common.Serialization.XmlSerializer`1.DeserializationProvider`1">DeserializationProvider Class</see>.
            </summary>
            <param name="serializer">
              <inheritdoc cref="P:Common.Serialization.XmlSerializer`1.DeserializationProvider`1.Serializer" select="../value/node()"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="serializer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Common.Serialization.XmlSerializer`1.DeserializationProvider`1.Deserialize(System.String)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="memberName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Common.Serialization.XmlSerializer`1.DeserializationProvider`1.DeserializeAs``1(System.String)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="elementName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Common.Serialization.XmlSerializer`1.DeserializationProvider`1.DeserializeAll(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Common.Serialization.XmlSerializer`1.DeserializationProvider`1.Serializer">
            <summary>
              Gets the <see cref="T:Common.Serialization.XmlSerializer`1"/> used to access the reflected type and member data.
            </summary>
            <value>
              The <see cref="T:Common.Serialization.XmlSerializer`1"/> used to access the reflected type and member data.
            </value>
        </member>
        <member name="T:Common.Serialization.XmlSerializer`1.SerializableMember">
            <summary>
              Contains data for a serializable field or property and provides a basic access interface.
            </summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="F:Common.Serialization.XmlSerializer`1.SerializableMember.name">
            <summary>
              <inheritdoc cref="P:Common.Serialization.XmlSerializer`1.SerializableMember.Name" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Serialization.XmlSerializer`1.SerializableMember.type">
            <summary>
              <inheritdoc cref="P:Common.Serialization.XmlSerializer`1.SerializableMember.Type" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Serialization.XmlSerializer`1.SerializableMember.collectionType">
            <summary>
              <inheritdoc cref="P:Common.Serialization.XmlSerializer`1.SerializableMember.CollectionType" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Serialization.XmlSerializer`1.SerializableMember.memberAttributes">
            <summary>
              <inheritdoc cref="P:Common.Serialization.XmlSerializer`1.SerializableMember.MemberAttributes" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Serialization.XmlSerializer`1.SerializableMember.collectionItemMemberAttributes">
            <summary>
              <inheritdoc cref="P:Common.Serialization.XmlSerializer`1.SerializableMember.CollectionItemMemberAttributes" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Serialization.XmlSerializer`1.SerializableMember.isGetable">
            <summary>
              <inheritdoc cref="P:Common.Serialization.XmlSerializer`1.SerializableMember.IsGetable" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Serialization.XmlSerializer`1.SerializableMember.isSetable">
            <summary>
              <inheritdoc cref="P:Common.Serialization.XmlSerializer`1.SerializableMember.IsSetable" select="../value/node()"/>
            </summary>
        </member>
        <member name="M:Common.Serialization.XmlSerializer`1.SerializableMember.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Serialization.XmlSerializer`1.SerializableMember">SerializableMember Class</see>.
            </summary>
        </member>
        <member name="M:Common.Serialization.XmlSerializer`1.SerializableMember.CreateIfSerializable(System.Reflection.MemberInfo,System.Collections.Generic.ICollection{System.Type})">
            <summary>
              Description
            </summary>
        </member>
        <member name="M:Common.Serialization.XmlSerializer`1.SerializableMember.GetMemberValue">
            <summary>
              Gets the value of a serializable member.
            </summary>
        </member>
        <member name="M:Common.Serialization.XmlSerializer`1.SerializableMember.SetMemberValue">
            <summary>
              Sets the value of a serializable member.
            </summary>
        </member>
        <member name="P:Common.Serialization.XmlSerializer`1.SerializableMember.Name">
            <summary>
              Gets the original name of the member.
            </summary>
            <value>
              The original name of the member.
            </value>
        </member>
        <member name="P:Common.Serialization.XmlSerializer`1.SerializableMember.Type">
            <summary>
              Gets the <see cref="P:Common.Serialization.XmlSerializer`1.SerializableMember.Type"/> of the member.
            </summary>
            <value>
              The <see cref="P:Common.Serialization.XmlSerializer`1.SerializableMember.Type"/> of the member.
            </value>
        </member>
        <member name="P:Common.Serialization.XmlSerializer`1.SerializableMember.CollectionType">
            <summary>
              Gets the Description
            </summary>
            <value>
              The Description
            </value>
        </member>
        <member name="P:Common.Serialization.XmlSerializer`1.SerializableMember.MemberAttributes">
            <summary>
              Gets the a collection containing the <see cref="T:Common.Serialization.XmlDataMemberAttribute"/> attributes of this member.
            </summary>
            <value>
              The a collection containing the <see cref="T:Common.Serialization.XmlDataMemberAttribute"/> attributes of this member.
            </value>
        </member>
        <member name="P:Common.Serialization.XmlSerializer`1.SerializableMember.CollectionItemMemberAttributes">
            <summary>
              Gets the dictionary containing the member attributes for collection items.
            </summary>
            <value>
              The dictionary containing the member attributes for collection items.
            </value>
        </member>
        <member name="P:Common.Serialization.XmlSerializer`1.SerializableMember.IsGetable">
            <summary>
              Gets a <see cref="T:System.Boolean"/> indicating whether the value of the serializable member is getable or not.
            </summary>
            <value>
              A <see cref="T:System.Boolean"/> indicating whether the value of the serializable member is getable or not.
            </value>
        </member>
        <member name="P:Common.Serialization.XmlSerializer`1.SerializableMember.IsSetable">
            <summary>
              Gets a <see cref="T:System.Boolean"/> indicating whether the value of the serializable member is setable or not.
            </summary>
            <value>
              A <see cref="T:System.Boolean"/> indicating whether the value of the serializable member is setable or not.
            </value>
        </member>
        <member name="T:Common.IAssignable">
            <summary>
              Supports assigning, which sets all members of one instance equal with the members of another instance.
            </summary>
        </member>
        <member name="M:Common.IAssignable.AssignTo(System.Object)">
            <summary>
              Assigns all members of the current instance to the given instance.
            </summary>
            <remarks>
              This method will <c>not</c> clone the members but simply assign them by using the = operator.
            </remarks>
            <param name="other">
              The other instance to assign the members to.
            </param>
        </member>
        <member name="T:Common.Test.TestNotExecuteableException">
            <summary>
              This exception is thrown when a software test was not able to be executed.
            </summary>
            <remarks>
              When this exception is thrown your current machine may not match the configuration
              which is expected by the test.
            </remarks>
            <seealso cref="T:System.Exception"/>
            <threadsafety static="false" instance="false"/>
        </member>
        <member name="M:Common.Test.TestNotExecuteableException.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Test.TestNotExecuteableException"/> class 
              using the default message.
            </summary>
            <remarks>
              The message property for this exception will be set to the default constantly 
              unlocalized defined message.
            </remarks>
        </member>
        <member name="M:Common.Test.TestNotExecuteableException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Test.TestNotExecuteableException"/> class.
            </summary>
            <param name="message">
              The exception message <see cref="T:System.String"/> describing the exception behavior to the user.
            </param>
            <param name="inner">
              The inner exception reference which caused the throw of this exception.
            </param>
        </member>
        <member name="M:Common.Test.TestNotExecuteableException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Test.TestNotExecuteableException"/> class.
            </summary>
            <param name="message">
              The exception message <see cref="T:System.String"/> describing the exception behavior to the user.
            </param>
        </member>
        <member name="M:Common.Test.TestNotExecuteableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Test.TestNotExecuteableException"/> class.
            </summary>
            <param name="info">
              The data for serializing or deserializing the exception.
            </param>
            <param name="context">
              The source and destination for the exception.
            </param>
        </member>
        <member name="M:Common.Test.TestNotExecuteableException.#ctor(System.String,System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Test.TestNotExecuteableException"/> class.
            </summary>
            <param name="message">
              The exception message <see cref="T:System.String"/> describing the exception behavior to the user.
            </param>
            <param name="testName">
              The <see cref="T:System.String"/> representing the name of the failed test.
            </param>
            <param name="inner">
              The inner exception reference which caused the throw of this exception.
            </param>
        </member>
        <member name="M:Common.Test.TestNotExecuteableException.#ctor(System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Test.TestNotExecuteableException"/> class.
            </summary>
            <param name="message">
              The exception message <see cref="T:System.String"/> describing the exception behavior to the user.
            </param>
            <param name="testName">
              The <see cref="T:System.String"/> representing the name of the failed test.
            </param>
        </member>
        <member name="M:Common.Test.TestNotExecuteableException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
              with information about the exception.
            </summary>
            <param name="info">
              The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the 
              exception being thrown.
            </param>
            <param name="context">
              The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the 
              source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
              The <paramref name="info"/> parameter is <c>null</c>.
            </exception>
            <permission cref="T:System.Security.Permissions.SecurityPermission">
              for providing serialization services.
            </permission>
        </member>
        <member name="M:Common.Test.TestNotExecuteableException.ToString">
            <summary>
              Creates and returns a string representation of the current exception.
            </summary>
            <returns>
              A string representation of the current exception.
            </returns>
        </member>
        <member name="P:Common.Test.TestNotExecuteableException.TestName">
            <summary>
              Gets a <see cref="T:System.String"/> representing the name of the failed test.
            </summary>
            <remarks>
              If the test name was not set using the corresponding constructor, the value will be <c>null</c>.
            </remarks>
            <value>
              The path <see cref="T:System.String"/> of the directory.
            </value>
        </member>
        <member name="T:Common.Validation.ValidationException">
            <summary>
              Thrown when a value assignment failed because the value is invalid.
            </summary>
            <seealso cref="T:Common.Validation.Validated`1"/>
            <seealso cref="!:Validator"/>
            <seealso cref="T:System.Exception"/>
            <threadsafety static="false" instance="false"/>
        </member>
        <member name="M:Common.Validation.ValidationException.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Validation.ValidationException"/> class 
              using the default message.
            </summary>
            <remarks>
              The message property for this exception will be set to the default constantly 
              unlocalized defined message.
            </remarks>
        </member>
        <member name="M:Common.Validation.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Validation.ValidationException"/> class.
            </summary>
            <param name="message">
              The exception message <see cref="T:System.String"/> describing the exception behavior to the user.
            </param>
            <param name="inner">
              The inner exception reference which caused the throw of this exception.
            </param>
        </member>
        <member name="M:Common.Validation.ValidationException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Validation.ValidationException"/> class.
            </summary>
            <param name="message">
              The exception message <see cref="T:System.String"/> describing the exception behavior to the user.
            </param>
        </member>
        <member name="M:Common.Validation.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Validation.ValidationException"/> class.
            </summary>
            <param name="info">
              The data for serializing or deserializing the exception.
            </param>
            <param name="context">
              The source and destination for the exception.
            </param>
        </member>
        <member name="M:Common.Validation.ValidationException.ToString">
            <summary>
              Creates and returns a string representation of the current exception.
            </summary>
            <returns>
              A string representation of the current exception.
            </returns>
        </member>
        <member name="T:Common.Serialization.XmlDataCollectionMemberAttribute">
            <summary>
              Indicates how the items contained by the field or property, class or structure, which implements 
              <see cref="T:System.Collections.IList"/>, should be serialized by using <see cref="!:XmlSerializer"/> and defines metadata to control the 
              serialization process.
            </summary>
            <seealso cref="T:Common.XmlDataMemberBaseAttribute">XmlDataMemberBaseAttribute Class</seealso>
            <seealso cref="T:Common.Serialization.XmlSerializer`1">XmlSerializer Class</seealso>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:Common.XmlDataMemberBaseAttribute">
            <summary>
              Represents a base attribute for other data member attributes.
            </summary>
            <seealso cref="T:System.Attribute">Attribute Class</seealso>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:Common.XmlDataMemberBaseAttribute.memberName">
            <summary>
              <inheritdoc cref="P:Common.XmlDataMemberBaseAttribute.MemberName" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.XmlDataMemberBaseAttribute.type">
            <summary>
              <inheritdoc cref="P:Common.XmlDataMemberBaseAttribute.Type" select="../value/node()"/>
            </summary>
        </member>
        <member name="P:Common.XmlDataMemberBaseAttribute.MemberName">
            <summary>
              Gets or sets the name which should be used when the member gets serialized.
            </summary>
            <value>
              The name which should be used when the member gets serialized.
            </value>
            <remarks>
              Set this property to <c>null</c> to indicate that the name of the member where this attribute is applied to should be
              used.
            </remarks>
        </member>
        <member name="P:Common.XmlDataMemberBaseAttribute.Type">
            <summary>
              Gets or sets the type where this attribute is defined for.
            </summary>
            <value>
              The type where this attribute is defined for.
            </value>
            <remarks>
              Set this property to define custom metadata for types derived of the type of the member where this attribute is 
              applied to.
            </remarks>
        </member>
        <member name="M:Common.Serialization.XmlDataCollectionMemberAttribute.#ctor(System.String,System.Type)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Serialization.XmlDataCollectionMemberAttribute">XmlDataCollectionMember Class</see> 
              by using the given default values as metadata.
            </summary>
            <param name="memberName">
              <inheritdoc cref="P:Common.XmlDataMemberBaseAttribute.MemberName" select="../value/node()"/>
            </param>
            <param name="type">
              <inheritdoc cref="P:Common.XmlDataMemberBaseAttribute.Type" select="../value/node()"/>
            </param>
            
            <overloads>
              <summary>
                Initializes a new instance of the <see cref="T:Common.Serialization.XmlDataCollectionMemberAttribute">XmlDataCollectionMember Class</see>.
              </summary>
            </overloads>
        </member>
        <member name="M:Common.Serialization.XmlDataCollectionMemberAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Common.Serialization.XmlDataCollectionMemberAttribute.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Common.Text.StringlistParser">
            <threadsafety static="false" instance="false" />
        </member>
        <member name="T:Common.Text.CommandParseSettings">
            <threadsafety static="false" instance="false" />
        </member>
        <member name="F:Common.Text.CommandParseSettings.commandPrefix">
            <summary>
              <inheritdoc cref="P:Common.Text.CommandParseSettings.CommandPrefix" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Text.CommandParseSettings.commandSuffix">
            <summary>
              <inheritdoc cref="P:Common.Text.CommandParseSettings.CommandSuffix" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Text.CommandParseSettings.parameterParseSettings">
            <summary>
              <inheritdoc cref="P:Common.Text.CommandParseSettings.ParameterParseSettings" select="../value/node()"/>
            </summary>
        </member>
        <member name="M:Common.Text.CommandParseSettings.#ctor(System.Nullable{System.Char},System.Nullable{System.Char},Common.Text.StringlistParseSettings)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Text.CommandParseSettings"/> struct.
            </summary>
            <param name="commandPrefix">
              <inheritdoc cref="P:Common.Text.CommandParseSettings.CommandPrefix" select="../value/node()"/>
            </param>
            <param name="commandSuffix">
              <inheritdoc cref="P:Common.Text.CommandParseSettings.CommandSuffix" select="../value/node()"/>
            </param>
            <param name="parameterParseSettings">
              <inheritdoc cref="P:Common.Text.CommandParseSettings.ParameterParseSettings" select="../value/node()"/>
            </param>
        </member>
        <member name="P:Common.Text.CommandParseSettings.CSharpStyle">
            <summary>
              Gets a C# command style setting schema.
            </summary>
            <value>
              A C# command style setting schema.
            </value>
        </member>
        <member name="P:Common.Text.CommandParseSettings.DOSStyle">
            <summary>
              Gets a DOS command style setting schema.
            </summary>
            <value>
              A DOS command style setting schema.
            </value>
        </member>
        <member name="P:Common.Text.CommandParseSettings.VisualBasicStyle">
            <summary>
              Gets a Visual Basic 6 command style setting schema.
            </summary>
            <value>
              A Visual Basic 6 command style setting schema.
            </value>
        </member>
        <member name="P:Common.Text.CommandParseSettings.CommandPrefix">
            <summary>
              Gets the char prefixing the command name.
            </summary>
            <value>
              The char prefixing the command name.
            </value>
        </member>
        <member name="P:Common.Text.CommandParseSettings.CommandSuffix">
            <summary>
              Gets the char suffixing the command line.
            </summary>
            <value>
              The char suffixing the command line.
            </value>
        </member>
        <member name="P:Common.Text.CommandParseSettings.ParameterParseSettings">
            <summary>
              Gets the settings for parameter parsing.
            </summary>
            <value>
              The settings for parameter parsing.
            </value>
        </member>
        <member name="T:Common.Serialization.XmlDataMemberAttribute">
            <summary>
              Indicates that the field or property should be serialized by using <see cref="!:XmlSerializer"/> and defines metadata
              to control the serialization process.
            </summary>
            <seealso cref="T:Common.XmlDataMemberBaseAttribute">XmlDataMemberBaseAttribute Class</seealso>
            <seealso cref="T:Common.Serialization.XmlSerializer`1">XmlSerializer Class</seealso>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:Common.Serialization.XmlDataMemberAttribute.order">
            <summary>
              <inheritdoc cref="P:Common.Serialization.XmlDataMemberAttribute.Order" select="../value/node()"/>
            </summary>
        </member>
        <member name="M:Common.Serialization.XmlDataMemberAttribute.#ctor(System.String,System.Type)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Serialization.XmlDataMemberAttribute">XmlDataMemberAttribute Class</see> by using the 
              given default values as metadata.
            </summary>
            <param name="memberName">
              <inheritdoc cref="P:Common.XmlDataMemberBaseAttribute.MemberName" select="../value/node()"/>
            </param>
            <param name="type">
              <inheritdoc cref="P:Common.XmlDataMemberBaseAttribute.Type" select="../value/node()"/>
            </param>
            
            <overloads>
              <summary>
                Initializes a new instance of the <see cref="T:Common.Serialization.XmlDataMemberAttribute">XmlDataMemberAttribute Class</see>.
              </summary>
            </overloads>
        </member>
        <member name="M:Common.Serialization.XmlDataMemberAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Common.Serialization.XmlDataMemberAttribute.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="P:Common.Serialization.XmlDataMemberAttribute.Order">
            <summary>
              Gets or sets a zero based index defining where this member should be ordered when serialized.
            </summary>
            <value>
              A zero based index defining where this member should be ordered when serialized.
            </value>
            <remarks>
              <para>
                Note that the <see cref="!:XmlSerializer"/> will never validate the element order when deserializing. If you wan't to
                validate forspecific element order, use an XML-Schema. If you however use an XML-Schema, make sure that this order
                index matches with the order you have defined in the XML-Schema.
              </para>
              <para>
                Set this property to <c>0</c> to indicate that the member where this attribute is applied to should be ordered behind
                all other elements.
              </para>
            </remarks>
            <seealso cref="!:XmlSerializer">XmlSerializer Class</seealso>
        </member>
        <member name="T:Common.Windows.Desktop">
            <summary>
              Provides methods to read and write Windows desktop related configuration entries.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Common.Windows.Desktop.GetWallpaperPath">
            <summary>
              Gets the path of the active wallpaper.
            </summary>
            <remarks>
              The path returned may also be empty or invalid.
              <c>null</c> will be returned if the key or value doesn't exist or isn't of type String.
            </remarks>
            <returns>
              A <see cref="T:System.String"/> representing the active wallpaper path. 
              <c>null</c> if the key or value doesn't exist or isn't of type string.
            </returns>
            <exception cref="T:System.Security.SecurityException">
              Missing framework access rights to read the registry key or its value.
              Or missing windows access rights to read the registry key.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
              Missing Windows access rights to read the registry value.
            </exception>
            <permission cref="T:System.Security.Permissions.RegistryPermission">
              for reading the registry key and value. Associated enumerations: 
              <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read">RegistryPermissionAccess.Read</see>.
            </permission>
            <permission cref="T:System.Security.Permissions.SecurityPermission">
              for the ability to access the specified registry key, if it is a remote key. 
              Associated enumeration: 
              <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">SecurityPermissionFlag.UnmanagedCode</see>.
            </permission>
        </member>
        <member name="M:Common.Windows.Desktop.SetWallpaperPath(System.String)">
            <summary>
              Sets the path of the active wallpaper.
            </summary>
            <remarks>
              The path may also be <see cref="F:System.String.Empty"/> to indicate that no wallpaper is set.
            </remarks>
            <param name="wallpaperPath">
              The path of the wallpaper.
            </param>
            <exception cref="T:System.ArgumentNullException">
              Thrown when <see cref="!:wallpaperPath"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Security.SecurityException">
              Missing framework access rights to write the registry key or its value.
              Or missing windows access rights to read or write the registry key.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
              Missing Windows access rights to read or write the registry values.
            </exception>
            <permission cref="T:System.Security.Permissions.RegistryPermission">
              for writing the registry key and value. Associated enumerations: 
              <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Write">RegistryPermissionAccess.Write</see>.
            </permission>
            <permission cref="T:System.Security.Permissions.SecurityPermission">
              for the ability to access the specified registry key, if it is a remote key. 
              Associated enumeration: 
              <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">SecurityPermissionFlag.UnmanagedCode</see>.
            </permission>
        </member>
        <member name="M:Common.Windows.Desktop.GetWallpaperArrangement">
            <summary>
              Gets the wallpaper arrangement.
            </summary>
            <remarks>
              This method returns <c>null</c> if the registry value is invalid or cannot be found.
            </remarks>
            <returns>
              A <see cref="T:System.Nullable`1"/>? object representing the current
              wallpaper arrangement. <c>null</c> if the registry value is invalid or cannot be found.
            </returns>
            <inheritdoc cref="M:Common.Windows.Desktop.GetWallpaperPath"/>
        </member>
        <member name="M:Common.Windows.Desktop.SetWallpaper(Common.IO.Path,System.Nullable{Common.Windows.WallpaperArrangement})">
            <summary>
              Sets a new wallpaper to be shown on the Windows desktop.
            </summary>
            <remarks>
              This method was tested on Windows Vista Business and worked fine with Bitmap and Jpeg files.
              However, the API documentation says that the API function used by this method only supports 
              Bitmap files so be carefully when using the method on other operating systems.
            </remarks>
            <param name="filePath">The path of the image file.</param>
            <param name="arrangement">
              The new arrangement of the wallpaper. Set to <c>null</c> to keep the arrangement unchanged.
            </param>
            <exception cref="T:System.Security.SecurityException">
              Missing framework access rights to read the file specified by <see cref="!:filePath"/>.
              Or missing framework access rights to read or write the registry key or its values.
              Or missing Windows access rights to read or write the registry key.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <see cref="!:filePath"/> is set to <c>null</c>.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
              Missing Windows access rights to read the registry values.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
              The file specified by <see cref="!:filePath"/> doesnt exist.
            </exception>
            <inheritdoc cref="M:Common.Windows.Desktop.SetWallpaperPath(System.String)" select="permission[@cref=&quot;RegistryPermission&quot;]"/>
            <permission cref="T:System.Security.Permissions.FileIOPermission">
              for reading the wallpaper file. Associated enumerations: 
              <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see>, 
              <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read">FileIOPermissionAccess.Read</see>.
            </permission>
        </member>
        <member name="M:Common.Windows.Desktop.SetWallpaper(Common.IO.Path)">
            <inheritdoc cref="M:Common.Windows.Desktop.SetWallpaper(Common.IO.Path,System.Nullable{Common.Windows.WallpaperArrangement})"/>
        </member>
        <member name="M:Common.Windows.Desktop.SetWallpaperToNone">
            <summary>
              Sets no wallpaper on the windows desktop.
            </summary>
            <inheritdoc cref="M:Common.Windows.Desktop.SetWallpaper(Common.IO.Path,System.Nullable{Common.Windows.WallpaperArrangement})" select="*[@cref!=&quot;FileIOPermission&quot;]"/>
        </member>
        <member name="T:Common.StringGenerator">
            <summary>
              Provides methods to generated several kinds of strings.
            </summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Common.StringGenerator.FromList(System.Collections.IList,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
              Description
            </summary>
        </member>
        <member name="M:Common.StringGenerator.FromListKeyed(System.Collections.Generic.IList{System.String},System.Collections.IList,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
              Description
            </summary>
        </member>
        <member name="M:Common.StringGenerator.ToString(System.Object)">
            <summary>
              
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Common.Serialization.ICustomSerialized">
            <summary>
              Allows a type to handle its serialization process manually.
            </summary>
            <remarks>
              If you plan to handle custom deserialization aswell, you have to also implement a constructor with the following layout:
              <code>MyClass(IDeserializationProvider dp)</code>
            </remarks>
        </member>
        <member name="M:Common.Serialization.ICustomSerialized.SerializeObject(Common.Serialization.ISerializationProvider)">
            <summary>
              Requests to serialize this object instance.
            </summary>
            <param name="sp">
              A provider to manage the serialization process.
            </param>
        </member>
        <member name="T:Common.Text.StringlistParseSettings">
            <threadsafety static="false" instance="false" />
        </member>
        <member name="F:Common.Text.StringlistParseSettings.stringSeparator">
            <summary>
              <inheritdoc cref="P:Common.Text.StringlistParseSettings.StringSeparator" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Text.StringlistParseSettings.listPrefix">
            <summary>
              <inheritdoc cref="P:Common.Text.StringlistParseSettings.ListPrefix" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Text.StringlistParseSettings.listSuffix">
            <summary>
              <inheritdoc cref="P:Common.Text.StringlistParseSettings.ListSuffix" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Text.StringlistParseSettings.maskingChar">
            <summary>
              <inheritdoc cref="P:Common.Text.StringlistParseSettings.MaskingChar" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Text.StringlistParseSettings.altValueMaskingChar">
            <summary>
              <inheritdoc cref="P:Common.Text.StringlistParseSettings.AltMaskingChar" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Text.StringlistParseSettings.explicitPrefixSuffix">
            <summary>
              <inheritdoc cref="P:Common.Text.StringlistParseSettings.ExplicitPrefixSuffix" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Text.StringlistParseSettings.namedStringPrefix">
            <summary>
              <inheritdoc cref="P:Common.Text.StringlistParseSettings.NamedStringPrefix" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Text.StringlistParseSettings.namedParameterValueSeparator">
            <summary>
              <inheritdoc cref="P:Common.Text.StringlistParseSettings.NamedStringValueSeparator" select="../value/node()"/>
            </summary>
        </member>
        <member name="M:Common.Text.StringlistParseSettings.#ctor(System.Char,System.Char,System.Char,System.Char,System.Char,System.Nullable{System.Char},System.Char,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Text.StringlistParseSettings"/> struct.
            </summary>
            <param name="stringSeparator">
              <inheritdoc cref="P:Common.Text.StringlistParseSettings.StringSeparator" select="../value/node()"/>
            </param>
            <param name="listPrefix">
              <inheritdoc cref="P:Common.Text.StringlistParseSettings.ListPrefix" select="../value/node()"/>
            </param>
            <param name="listSuffix">
              <inheritdoc cref="P:Common.Text.StringlistParseSettings.ListSuffix" select="../value/node()"/>
            </param>
            <param name="maskingChar">
              <inheritdoc cref="P:Common.Text.StringlistParseSettings.MaskingChar" select="../value/node()"/>
            </param>
            <param name="altMaskingChar">
              <inheritdoc cref="P:Common.Text.StringlistParseSettings.AltMaskingChar" select="../value/node()"/>
            </param>
            <param name="namedStringPrefix">
              <inheritdoc cref="P:Common.Text.StringlistParseSettings.NamedStringPrefix" select="../value/node()"/>
            </param>
            <param name="namedStringValueSeparator">
              <inheritdoc cref="P:Common.Text.StringlistParseSettings.NamedStringValueSeparator" select="../value/node()"/>
            </param>
            <param name="explicitPrefixSuffix">
              <inheritdoc cref="P:Common.Text.StringlistParseSettings.ExplicitPrefixSuffix" select="../value/node()"/>
            </param>
        </member>
        <member name="M:Common.Text.StringlistParseSettings.#ctor(System.Char,System.Char,System.Char)">
            <inheritdoc />
        </member>
        <member name="P:Common.Text.StringlistParseSettings.CSharpStyle">
            <summary>
              Gets a C# command style setting schema.
            </summary>
            <value>
              A C# command style setting schema.
            </value>
        </member>
        <member name="P:Common.Text.StringlistParseSettings.DOSStyle">
            <summary>
              Gets a DOS command style setting schema.
            </summary>
            <value>
              A DOS command style setting schema.
            </value>
        </member>
        <member name="P:Common.Text.StringlistParseSettings.VisualBasicStyle">
            <summary>
              Gets a Visual Basic 6 command style setting schema.
            </summary>
            <value>
              A Visual Basic 6 command style setting schema.
            </value>
        </member>
        <member name="P:Common.Text.StringlistParseSettings.StringSeparator">
            <summary>
              Gets or sets the char separating each parameter from the others.
            </summary>
            <value>
              The char separating each parameter from the others.
            </value>
        </member>
        <member name="P:Common.Text.StringlistParseSettings.ListPrefix">
            <summary>
              Gets or sets the character prefixing the begin of the parameter set (after the command name).
            </summary>
            <value>
              The character prefixing the begin of the parameter set (after the command name).
            </value>
        </member>
        <member name="P:Common.Text.StringlistParseSettings.ListSuffix">
            <summary>
              Gets or sets the character suffixing the end of the parameter set (behind the last parameter).
            </summary>
            <value>
              The character suffixing the end of the parameter set (behind the last parameter).
            </value>
        </member>
        <member name="P:Common.Text.StringlistParseSettings.MaskingChar">
            <summary>
              Gets or sets the character used to mask a value (to exclude a value from being parsed).
            </summary>
            <value>
              The character used to mask a value (to exclude a value from being parsed).
            </value>
        </member>
        <member name="P:Common.Text.StringlistParseSettings.AltMaskingChar">
            <summary>
              Gets or sets the alternative character used to mask a value (to exclude a value from being parsed).
            </summary>
            <value>
              The alternative character used to mask a value (to exclude a value from being parsed).
            </value>
        </member>
        <member name="P:Common.Text.StringlistParseSettings.NamedStringPrefix">
            <summary>
              Gets or sets the character used to prefix a named parameter.
            </summary>
            <value>
              The character used to prefix a named parameter; <c>null</c> if no named parameter prefix is used.
            </value>
        </member>
        <member name="P:Common.Text.StringlistParseSettings.NamedStringValueSeparator">
            <summary>
              Gets or sets the character used to separate the named parameter name from its value.
            </summary>
            <value>
              The character used to separate the named parameter name from its value; <c>null</c> if no
              named parameter-value separator is used.
            </value>
        </member>
        <member name="P:Common.Text.StringlistParseSettings.ExplicitPrefixSuffix">
            <summary>
              Gets or sets a value indicating whether the parameter set has to be explicitly defined by 
              prefixing it with <see cref="P:Common.Text.StringlistParseSettings.ListPrefix"/> and suffixing it with <see cref="P:Common.Text.StringlistParseSettings.ListSuffix"/>.
            </summary>
            <value>
              <c>true</c> whether the parameter set has to be explicitly defined by prefixing it with 
              <see cref="P:Common.Text.StringlistParseSettings.ListPrefix"/> and suffixing it with <see cref="P:Common.Text.StringlistParseSettings.ListSuffix"/>; 
              otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:Common.PathException">
            <summary>
              Thrown when an invalid operation is performed by the <see cref="P:Common.PathException.Path"/> structure.
            </summary>
        </member>
        <member name="F:Common.PathException.path">
            <summary>
              <inheritdoc cref="P:Common.PathException.Path" select="../value/node()"/>
            </summary>
        </member>
        <member name="M:Common.PathException.#ctor(System.String,System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.PathException"/> class with the given <paramref name="path"/>.
            </summary>
            <param name="path">
              The path string where this exception is related to.
            </param>
            <inheritdoc/>
            <overloads>
              <summary>
                Initializes a new instance of the <see cref="T:Common.PathException"/> class with the given <paramref name="path"/>.
              </summary>
            </overloads>
        </member>
        <member name="M:Common.PathException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Common.PathException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.PathException"/> class with the given <paramref name="path"/> and by 
              using the default message.
            </summary>
            <remarks>
              The message property for this exception will be set to the default constant unlocalized message.
            </remarks>
            <inheritdoc/>
        </member>
        <member name="M:Common.PathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Common.PathException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Common.PathException.Path">
            <summary>
              Gets the path string where this exception is related to.
            </summary>
            <value>
              The path string where this exception is related to.
            </value>
        </member>
        <member name="T:Common.Validation.Validated`1">
            <summary>
              Wraps around a value while guaranteeing for its validness.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="F:Common.Validation.Validated`1.value">
            <summary>
              <inheritdoc cref="P:Common.Validation.Validated`1.Value" select="../value/node()"/>
            </summary>
        </member>
        <member name="M:Common.Validation.Validated`1.#ctor(`0)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Validation.Validated`1"/> class.
            </summary>
            <exception cref="T:Common.Validation.ValidationException">
              Tried to assign a invalid value.
            </exception>
        </member>
        <member name="M:Common.Validation.Validated`1.Validate(`0)">
            <summary>
              Checks whether the given <paramref name="value" /> is valid.
            </summary>
            <param name="value">
              The value to check.
            </param>
        </member>
        <member name="M:Common.Validation.Validated`1.OnPropertyChanged(System.String)">
            <commondoc select='INotifyPropertyChanged/Methods/OnPropertyChanged/*' />
        </member>
        <member name="E:Common.Validation.Validated`1.PropertyChanged">
            <inheritdoc cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
        </member>
        <member name="P:Common.Validation.Validated`1.Value">
            <summary>
              Gets or sets the wrapped value.
            </summary>
            <value>
              The valid value.
            </value>
            <exception cref="T:Common.Validation.ValidationException">
              Tried to assign a invalid value.
            </exception>
        </member>
        <member name="T:Common.IO.FileSystemElementType">
            <summary>
              Specifies the type of a file system element.
            </summary>
        </member>
        <member name="F:Common.IO.FileSystemElementType.Directory">
            <summary>
              Specifies a folder.
            </summary>
        </member>
        <member name="F:Common.IO.FileSystemElementType.File">
            <summary>
              Specifies a file.
            </summary>
        </member>
        <member name="T:Common.Serialization.XmlSerializableAttribute">
            <summary>
              Indicates that a class or structure can be serialized by using <see cref="!:XmlSerializer"/>.
            </summary>
            <seealso cref="!:XmlSerializer">XmlSerializer Class</seealso>
            <seealso cref="T:System.Attribute">Attribute Class</seealso>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Common.Serialization.XmlSerializableAttribute.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Common.Serialization.XmlSerializableAttribute">XmlSerializableAttribute Class</see>.
            </summary>
        </member>
        <member name="T:Common.VariableType">
            <summary>
              Specifies the kind of variable used in a generated <see cref="T:System.Exception"/> message.
            </summary>
        </member>
        <member name="F:Common.VariableType.Parameter">
            <summary>
              Represents a method's parameter.
            </summary>
        </member>
        <member name="F:Common.VariableType.Field">
            <summary>
              Represents a class' field.
            </summary>
        </member>
        <member name="F:Common.VariableType.Property">
            <summary>
              Represents a class' property.
            </summary>
        </member>
        <member name="T:Common.ExceptionMessagesCommon">
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetVariableCanNotBeNull(System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the value can not be <c>null</c>.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the value can not be <c>null</c>.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetPathCanNotBeNone(System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the <see cref="!:Path"/> can not be <see cref="!:Path"/>.<see cref="!:Path.None"/>.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the <see cref="!:Path"/> can not be <see cref="!:Path"/>.<see cref="!:Path.None"/>.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetThisObjectIsDisposed">
            <summary>
              Returns a string saying that the current object has been disposed.
            </summary>
            <returns>
              A string saying that the current object has been disposed.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetStringIsEmpty(System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the string can not be empty.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the string can not be empty.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetStringIsEmptyOrClear(System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the string can not be empty or contains whitespaces only.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the string can not be empty or contains whitespaces only.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetValueOutOfRange(System.String,System.Object,System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the value is not in the expected range.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <param name="valueCurrent">
              The actual value of the variable.
            </param>
            <param name="valueMin">
              The minimal value allowed for the variable.
            </param>
            <param name="valueMax">
              The maximal value allowed for the variable.
            </param>
            <returns>
              A string saying that the value is not in the expected range.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetValueMustBeGreaterThanVariable(System.String,System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the value has to be greater than another variable's value.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <param name="currentValue">
              The actual value of the variable.
            </param>
            <param name="lesserVariableName">
              The name of the variable which value has to be below <paramref name="variableName"/>.
            </param>
            <returns>
              A string saying that the value has to be greater than another variable's value.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetValueMustBeGreaterThanValue(System.String,System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the value has to be greater than a specific value.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <param name="currentValue">
              The actual value of the variable.
            </param>
            <param name="variableName">
              The name of the variable which value has to be below <paramref name="variableName"/>.
            </param>
            <param name="minValue">
              The minimum value allowed for the variable.
            </param>
            <returns>
              A string saying that the value has to be greater than a specific value.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetValueMustBeLowerThanVariable(System.String,System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the value has to be lower than another variable's value.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <param name="currentValue">
              The actual value of the variable.
            </param>
            <param name="greaterThanVariableName">
              The name of the variable which value has to be above <paramref name="variableName"/>.
            </param>
            <returns>
              A string saying that the value has to be lower than another variable's value.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetValueMustBeLowerThanValue(System.String,System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the value has to be lower than a specific value.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <param name="currentValue">
              The actual value of the variable.
            </param>
            <param name="variableName">
              The name of the variable which value has to be below <paramref name="variableName"/>.
            </param>
            <param name="maxValue">
              The maximum value allowed for the variable.
            </param>
            <returns>
              A string saying that the value has to be lower than a specific value.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetEnumValueInvalid(System.String,System.Type,System.Object,System.Object[],Common.VariableType)">
            <summary>
              Returns a string saying that the configuration's root element is invalid.
            </summary>
            <param name="enumType">
              The <see cref="T:System.Type"/> of the enumeration.
            </param>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <param name="currentValue">
              The current value of the invalid variable.
            </param>
            <param name="acceptedValues">
              The values allowed for the variable.
              Default: A auto-generated list of all values specified by the given <paramref name="enumType"/>.
            </param>
            <returns>
              A string saying that the configuration's root element is invalid.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetTypeIsNotCastable(System.String,System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the base type is not castable to a derived type.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the base type is not castable to a derived type.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetSupportedInDerivedClassOnly">
            <summary>
              Returns a string saying that the operation is only supported by derived implementations of this class.
            </summary>
            <returns>
              A string saying that the operation is only supported by derived implementations of this class.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetNoEventHandlersRegistered(System.String)">
            <summary>
              Returns a string saying that an event handler has to be registered to perform the requested operation.
            </summary>
            <param name="eventName">
              The name of the related event.
            </param>
            <returns>
              A string saying that an event handler has to be registered to perform the requested operation.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetRequestedObjectNotProvided(System.String,System.Type)">
            <summary>
              Returns a string saying that the requested object was not provided by any registered event handler.
            </summary>
            <param name="eventName">
              The name of the related event.
            </param>
            <param name="objectType">
              The type of the requested object.
            </param>
            <returns>
              A string saying that the requested object was not provided by any registered event handler.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetExceptionNotHandled(System.String)">
            <summary>
              Returns a string saying that the requested object was not provided by any registered event handler.
            </summary>
            <param name="eventName">
              The name of the related event.
            </param>
            <returns>
              A string saying that the requested object was not provided by any registered event handler.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetCollectionIsReadOnly(System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the collection is read only.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the collection is read only.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetCollectionIsFixedSize(System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the collection has a fixed size.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the collection has a fixed size.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetCollectionIsNotFixedSize(System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the collection has no fixed size.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the collection has no fixed size.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetCollectionIsNotSynchronized(System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the collection is not synchronized.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the collection is not synchronized.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetCollectionIsEmpty(System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the collection can not be empty.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the collection can not be empty.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetCollectionAlreadyContainsItem(System.String,Common.VariableType,System.String)">
            <summary>
              Returns a string saying that the collection already contains the given item.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <param name="item">
              The string representation of the contained item.
            </param>
            <returns>
              A string saying that the collection already contains the given item.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetCollectionContainsNullItem(System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the collection is not allowed to contain a <c>null</c> item.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the collection is not allowed to contain a <c>null</c> item.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetEnumeratorNotStartedOrAlreadyFinished">
            <summary>
              Returns a string saying that the enumerator already finished or had not been started yet.
            </summary>
            <returns>
              A string saying that the enumerator already finished or had not been started yet.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetCollectionModified(System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the collection had been modified during the enumeration process.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the collection had been modified during the enumeration process.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetPathNotRooted(System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the path needs to be rooted.
            </summary>
            <param name="path">
              The unrooted path.
            </param>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the path need to be rooted.
            </returns>
            
        <exception cref="T:System.Security.SecurityException">
          Missing <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see> for the given 
          path string.
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          for displaying the path to the user. Associated enumerations: 
          <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see>.
        </permission>
      
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetDirectoryMustBeEmpty(System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the directory has to be empty.
            </summary>
            <param name="directoryPath">
              The path of the not empty directory.
            </param>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the directory has to be empty.
            </returns>
            
        <exception cref="T:System.Security.SecurityException">
          Missing <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see> for the given 
          path string.
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          for displaying the path to the user. Associated enumerations: 
          <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see>.
        </permission>
      
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetPathContainsInvalidChars(System.String,Common.VariableType,System.String)">
            <summary>
              Returns a string saying that the path contains invalid characters.
            </summary>
            <param name="path">
              The invalid path.
            </param>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the path contains invalid characters.
            </returns>
            
        <exception cref="T:System.Security.SecurityException">
          Missing <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see> for the given 
          path string.
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          for displaying the path to the user. Associated enumerations: 
          <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see>.
        </permission>
      
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetConfigurationInvalid(System.String)">
            <summary>
              Returns a string saying that the configuration is invalid.
            </summary>
            <param name="filePath">
              The path of the configuration-file.
            </param>
            <returns>
              A string saying that the configuration is invalid.
            </returns>
            
        <exception cref="T:System.Security.SecurityException">
          Missing <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see> for the given 
          path string.
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          for displaying the path to the user. Associated enumerations: 
          <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see>.
        </permission>
      
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetConfigurationInvalidRootElement(System.String)">
            <summary>
              Returns a string saying that the configuration's root element is invalid.
            </summary>
            <param name="filePath">
              The path of the configuration-file.
            </param>
            <returns>
              A string saying that the configuration's root element is invalid.
            </returns>
            
        <exception cref="T:System.Security.SecurityException">
          Missing <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see> for the given 
          path string.
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          for displaying the path to the user. Associated enumerations: 
          <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see>.
        </permission>
      
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetConfigurationTooOld(System.Version,System.Version,System.String)">
            <summary>
              Returns a string saying that the configuration is too old.
            </summary>
            <param name="fileVersion">
              The version of the loaded configuration.
            </param>
            <param name="latestVersion">
              The newest supported version of the configuration.
            </param>
            <param name="filePath">
              The path of the configuration-file.
            </param>
            <returns>
              A string saying that the configuration is too old.
            </returns>
            
        <exception cref="T:System.Security.SecurityException">
          Missing <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see> for the given 
          path string.
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          for displaying the path to the user. Associated enumerations: 
          <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see>.
        </permission>
      
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetConfigurationIsReadOnly(System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the configuration is read only.
            </summary>
            <param name="filePath">
              The path of the configuration-file.
            </param>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the configuration is read only.
            </returns>
            
        <exception cref="T:System.Security.SecurityException">
          Missing <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see> for the given 
          path string.
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          for displaying the path to the user. Associated enumerations: 
          <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see>.
        </permission>
      
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetFileNotFound(System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the file does not exist.
            </summary>
            <param name="filePath">
              The path of the unexistent file.
            </param>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the file does not exist.
            </returns>
            
        <exception cref="T:System.Security.SecurityException">
          Missing <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see> for the given 
          path string.
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          for displaying the path to the user. Associated enumerations: 
          <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see>.
        </permission>
      
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetDirectoryNotFound(System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the directory does not exist.
            </summary>
            <param name="directoryPath">
              The path of the unexistent directory.
            </param>
            <returns>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
              A string saying that the directory does not exist.
            </returns>
            
        <exception cref="T:System.Security.SecurityException">
          Missing <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see> for the given 
          path string.
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          for displaying the path to the user. Associated enumerations: 
          <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see>.
        </permission>
      
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetFileAlreadyExist(System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the file already exist.
            </summary>
            <param name="filePath">
              The path of the existing file.
            </param>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the file already exist.
            </returns>
            
        <exception cref="T:System.Security.SecurityException">
          Missing <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see> for the given 
          path string.
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          for displaying the path to the user. Associated enumerations: 
          <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see>.
        </permission>
      
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetDirectoryAlreadyExist(System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the directory already exist.
            </summary>
            <param name="directoryPath">
              The path of the existing directory.
            </param>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the directory already exist.
            </returns>
            
        <exception cref="T:System.Security.SecurityException">
          Missing <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see> for the given 
          path string.
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          for displaying the path to the user. Associated enumerations: 
          <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see>.
        </permission>
      
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetPathIsTooLong(System.String,System.Nullable{System.Int32},System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the path is too long.
            </summary>
            <param name="path">
              The invalid path.
            </param>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the path is too long.
            </returns>
            
        <exception cref="T:System.Security.SecurityException">
          Missing <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see> for the given 
          path string.
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          for displaying the path to the user. Associated enumerations: 
          <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see>.
        </permission>
      
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetConfigurationCannotBeRead(System.String)">
            <summary>
              Returns a string saying that the configuration could not be read.
            </summary>
            <param name="filePath">
              The path of the file.
            </param>
            <returns>
              A string saying that the configuration could not be read.
            </returns>
            
        <exception cref="T:System.Security.SecurityException">
          Missing <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see> for the given 
          path string.
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          for displaying the path to the user. Associated enumerations: 
          <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see>.
        </permission>
      
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetConfigurationCouldNotBeWritten(System.String)">
            <summary>
              Returns a string saying that the configuration could not be written.
            </summary>
            <param name="filePath">
              The path of the file.
            </param>
            <returns>
              A string saying that the configuration could not be written.
            </returns>
            
        <exception cref="T:System.Security.SecurityException">
          Missing <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see> for the given 
          path string.
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          for displaying the path to the user. Associated enumerations: 
          <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">FileIOPermissionAccess.PathDiscovery</see>.
        </permission>
      
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetRegistryValueOfUnexpectedType(System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the registry entry value has an unexpected format.
            </summary>
            <param name="registryValuePath">
              The path of the invalid registry value.
            </param>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the registry entry value has an unexpected format.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetRegistryKeyDoesntExist(System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the registry key does not exist.
            </summary>
            <param name="keyPath">
              The path of the missing registry key.
            </param>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the registry key does not exit.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetRegistryKeyDoesAlreadyExist(System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the registry key does already exist.
            </summary>
            <param name="keyPath">
              The path of the existing registry key.
            </param>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the registry key does already exist.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetStreamDoesNotSupportReading(System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the stream does not support reading.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the stream does not support reading.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetStreamDoesNotSupportWriting(System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the stream does not support writing.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the stream does not support writing.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GetStreamDoesNotSupportSeeking(System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the stream does not support seeking.
            </summary>
            
        <param name="variableName">
          The name of variable containing the invalid value.
        </param>
        <param name="variableType">
          The type of the variable containing the invalid value.
        </param>
      
            <returns>
              A string saying that the stream does not support seeking.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GenerateMessage(System.String,Common.VariableType,System.String,System.String[],System.String[])">
            <summary>
              Extends a <see cref="T:System.Exception"/> message with parameter names and parameter values.
            </summary>
            <param name="messageText">
              The general message text for the <see cref="T:System.Exception"/>.
            </param>
            <param name="variableType">
              The type of the first parameter added to the <see cref="T:System.Exception"/> message.
            </param>
            <param name="variableValue">
              The value of the first parameter added to the <see cref="T:System.Exception"/> message.
            </param>
            <param name="otherParamNames">
              The names of the parameters.
            </param>
            <param name="otherParamValues">
              The list of values of the parameters.
            </param>
            <returns>
              An extended string contaning the <paramref name="messageText"/> and the parameter names/value data.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GenerateMessage(System.String,Common.VariableType,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GenerateMessage(System.String,System.String[],System.String[])">
            <summary>
              Extends a <see cref="T:System.Exception"/> message with parameter names and parameter values.
            </summary>
            <param name="messageText">
              The general message text for the <see cref="T:System.Exception"/>.
            </param>
            <param name="paramNames">
              The names of the parameters.
            </param>
            <param name="paramValues">
              The list of values of the parameters.
            </param>
            <returns>
              An extended string contaning the <paramref name="messageText"/> and the parameter names/value data.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessagesCommon.GenerateMessage(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Common.Windows.WallpaperArrangement">
            <summary>
              Specifies the arrangement of a wallpaper.
            </summary>
        </member>
        <member name="F:Common.Windows.WallpaperArrangement.Center">
            <summary>
              Specifies that the wallpaper is centered on the desktop.
            </summary>
        </member>
        <member name="F:Common.Windows.WallpaperArrangement.Stretch">
            <summary>
              Specifies that the wallpaper is stretched over the desktop.
            </summary>
        </member>
        <member name="F:Common.Windows.WallpaperArrangement.Tile">
            <summary>
              Specifies that the wallpaper is tiled over the desktop.
            </summary>
        </member>
        <member name="T:Common.Validation.ExistenceValidationMode">
            <summary>
              Specifies the mode of validation for the existence of a specified resource.
            </summary>
        </member>
        <member name="F:Common.Validation.ExistenceValidationMode.ResourceMustExist">
            <summary>
              Specifies that the validation will only be successful if the resource exists.
            </summary>
        </member>
        <member name="F:Common.Validation.ExistenceValidationMode.ResourceMustNotExist">
            <summary>
              Specifies that the validation will only be successful if the resource does not exists.
            </summary>
        </member>
        <member name="T:Common.AppEnvironment">
            <summary>
              Provides serveral data related to the current application's environment.
            </summary>
            <remarks>
              It is recommended to inherit a class with the same name for any new application using the Common Library, and 
              implementing more specific application data such as paths of commonly used files etc.
            </remarks>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="F:Common.AppEnvironment.osVersion">
            <summary>
              <inheritdoc cref="P:Common.AppEnvironment.OSVersion" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.AppEnvironment.userName">
            <summary>
              <inheritdoc cref="P:Common.AppEnvironment.UserName" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.AppEnvironment.machineName">
            <summary>
              <inheritdoc cref="P:Common.AppEnvironment.MachineName" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.AppEnvironment.commonLibraryVersion">
            <summary>
              <inheritdoc cref="P:Common.AppEnvironment.CommonLibraryVersion" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.AppEnvironment.generalAppDataPath">
            <summary>
              <inheritdoc cref="P:Common.AppEnvironment.GeneralAppDataPath" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.AppEnvironment.generalLocalAppDataPath">
            <summary>
              <inheritdoc cref="P:Common.AppEnvironment.GeneralLocalAppDataPath" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.AppEnvironment.generalCommonAppDataPath">
            <summary>
              <inheritdoc cref="P:Common.AppEnvironment.GeneralCommonAppDataPath" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.AppEnvironment.appAssembly">
            <summary>
              <inheritdoc cref="P:Common.AppEnvironment.AppAssembly" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.AppEnvironment.appAssemblyName">
            <summary>
              <inheritdoc cref="P:Common.AppEnvironment.AppAssemblyName" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.AppEnvironment.appArguments">
            <summary>
              <inheritdoc cref="P:Common.AppEnvironment.AppArguments" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.AppEnvironment.appExePath">
            <summary>
              <inheritdoc cref="P:Common.AppEnvironment.AppExePath" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.AppEnvironment.appPath">
            <summary>
              <inheritdoc cref="P:Common.AppEnvironment.AppPath" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.AppEnvironment.appDataPath">
            <summary>
              <inheritdoc cref="P:Common.AppEnvironment.AppDataPath" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.AppEnvironment.localAppDataPath">
            <summary>
              <inheritdoc cref="P:Common.AppEnvironment.LocalAppDataPath" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.AppEnvironment.commonAppDataPath">
            <summary>
              <inheritdoc cref="P:Common.AppEnvironment.CommonAppDataPath" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.AppEnvironment.systemTempPath">
            <summary>
              <inheritdoc cref="P:Common.AppEnvironment.SystemTempPath" select="../value/node()"/>
            </summary>
        </member>
        <member name="M:Common.AppEnvironment.#cctor">
            <summary>
              Initializes static members of the <see cref="T:Common.AppEnvironment">AppEnvironment Class</see>.
            </summary>
        </member>
        <member name="M:Common.AppEnvironment.#ctor(System.Reflection.Assembly)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.AppEnvironment">AppEnvironment Class</see>.
            </summary>
            <remarks>
              This class is not meant to be initialized.
            </remarks>
            <param name="appAssembly">
              <inheritdoc cref="P:Common.AppEnvironment.AppAssembly" select="../value/node()"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="appAssembly"/> is <c>null</c>.
            </exception>
            <seealso cref="T:System.Reflection.Assembly">Assembly Class</seealso>
        </member>
        <member name="P:Common.AppEnvironment.OSVersion">
            <summary>
              Gets the Operating System's <see cref="T:System.Version"/>.
            </summary>
            <value>
              The Operating System's <see cref="T:System.Version"/>.
            </value>
        </member>
        <member name="P:Common.AppEnvironment.UserName">
            <summary>
              Gets the name of the current user being logged on.
            </summary>
            <value>
              The name of the current user being logged on.
            </value>
            <inheritdoc cref="P:System.Environment.UserName" select="permission|exception"/>
        </member>
        <member name="P:Common.AppEnvironment.MachineName">
            <summary>
              Gets the NetBIOS name of the computer.
            </summary>
            <value>
              The NetBIOS name of the computer.
            </value>
            <inheritdoc cref="P:System.Environment.MachineName" select="permission|exception"/>
        </member>
        <member name="P:Common.AppEnvironment.CommonLibraryVersion">
            <summary>
              Gets the <see cref="T:System.Version"/> of the Common Library <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <value>
              The <see cref="T:System.Version"/> of the Common Library <see cref="T:System.Reflection.Assembly"/>.
            </value>
        </member>
        <member name="P:Common.AppEnvironment.GeneralAppDataPath">
            <summary>
              Gets the common repository for application-specific data for the current roaming user.
            </summary>
            <value>
              The common repository for application-specific data for the current roaming user.
            </value>
        </member>
        <member name="P:Common.AppEnvironment.GeneralLocalAppDataPath">
            <summary>
              Gets the common repository for application-specific data for the current local user.
            </summary>
            <value>
              The common repository for application-specific data for the current local user.
            </value>
        </member>
        <member name="P:Common.AppEnvironment.GeneralCommonAppDataPath">
            <summary>
              Gets the common repository for application-specific data for all users.
            </summary>
            <value>
              The common repository for application-specific data for all users.
            </value>
        </member>
        <member name="P:Common.AppEnvironment.CurrentDirectory">
            <summary>
              Gets or sets the the current directory of the application's environment.
            </summary>
            <value>
              The the current directory of the application's environment.
            </value>
            <exception cref="T:System.ArgumentNullException">
              Attempted to set a <c>null</c> value.
            </exception>
            <inheritdoc cref="P:System.Environment.CurrentDirectory" select="permission|exception"/>
        </member>
        <member name="P:Common.AppEnvironment.AppAssembly">
            <summary>
              Gets the <see cref="T:System.Reflection.Assembly"/> of the current application.
            </summary>
            <value>
              The <see cref="T:System.Reflection.Assembly"/> of the current application.
            </value>
            <seealso cref="T:System.Reflection.Assembly">Assembly Class</seealso>
        </member>
        <member name="P:Common.AppEnvironment.AppAssemblyName">
            <summary>
              Gets the <see cref="T:System.Reflection.AssemblyName"/> of the current application's <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <value>
              The <see cref="T:System.Reflection.AssemblyName"/> of the current application's <see cref="T:System.Reflection.Assembly"/>.
            </value>
            <seealso cref="T:System.Reflection.AssemblyName">AssemblyName Class</seealso>
            <seealso cref="T:System.Reflection.Assembly">Assembly Class</seealso>
        </member>
        <member name="P:Common.AppEnvironment.AppName">
            <summary>
              Gets the name of the application's assembly.
            </summary>
            <value>
              The name of the application's assembly.
            </value>
        </member>
        <member name="P:Common.AppEnvironment.AppVersion">
            <summary>
              Gets the version number of the application's assembly.
            </summary>
            <value>
              The version number of the application's assembly.
            </value>
        </member>
        <member name="P:Common.AppEnvironment.AppArguments">
            <summary>
              Gets the collection of arguments passed to the application when it got started.
            </summary>
            <value>
              The collection of arguments passed to the application when it got started.
            </value>
        </member>
        <member name="P:Common.AppEnvironment.AppExePath">
            <summary>
              Gets the <see cref="T:Common.IO.Path"/> of the application's executable.
            </summary>
            <value>
              The <see cref="T:Common.IO.Path"/> of the application's executable.
            </value>
        </member>
        <member name="P:Common.AppEnvironment.AppPath">
            <summary>
              Gets the <see cref="T:Common.IO.Path"/> of the application executable's directory.
            </summary>
            <value>
              The <see cref="T:Common.IO.Path"/> of the application executable's directory.
            </value>
        </member>
        <member name="P:Common.AppEnvironment.AppDataPath">
            <summary>
              Gets the application's data Path for the current roaming user.
            </summary>
            <value>
              The application's data Path for the current roaming user.
            </value>
        </member>
        <member name="P:Common.AppEnvironment.LocalAppDataPath">
            <summary>
              Gets the application's data Path for the current local user.
            </summary>
            <value>
              The application's data Path for the current local user.
            </value>
        </member>
        <member name="P:Common.AppEnvironment.CommonAppDataPath">
            <summary>
              Gets the application's data Path for all users.
            </summary>
            <value>
              The application's data Path for all users.
            </value>
        </member>
        <member name="P:Common.AppEnvironment.SystemTempPath">
            <summary>
              Gets the temporary directory of the operating system.
            </summary>
            <value>
              The temporary directory of the operating system.
            </value>
        </member>
        <member name="T:Common.Serialization.XmlRootAttribute">
            <summary>
              Defines metadata for a class or structure to control the serialization process by using <see cref="!:XmlSerializer"/>.
            </summary>
            <seealso cref="!:XmlSerializer">XmlSerializer Class</seealso>
            <seealso cref="T:System.Attribute">Attribute Class</seealso>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:Common.Serialization.XmlRootAttribute.rootName">
            <summary>
              <inheritdoc cref="P:Common.Serialization.XmlRootAttribute.RootName" select="../value/node()"/>
            </summary>
        </member>
        <member name="F:Common.Serialization.XmlRootAttribute.xmlNamespace">
            <summary>
              <inheritdoc cref="P:Common.Serialization.XmlRootAttribute.XmlNamespace" select="../value/node()"/>
            </summary>
        </member>
        <member name="P:Common.Serialization.XmlRootAttribute.RootName">
            <summary>
              Gets or sets the name which should be used when an instance of this type is serialized.
            </summary>
            <value>
              The name which should be used when an instance of this type is serialized.
            </value>
            <remarks>
              Set this property to <c>null</c> to indicate that the name of the type where this attribute is applied to should be
              used.
            </remarks>
        </member>
        <member name="P:Common.Serialization.XmlRootAttribute.XmlNamespace">
            <summary>
              Gets or sets the XML-Namespace of the root node.
            </summary>
            <value>
              The XML-Namespace of the root node.
            </value>
        </member>
        <member name="T:Common.ExceptionEventArgs">
            <summary>
              Provides exception event related data.
            </summary>
        </member>
        <member name="F:Common.ExceptionEventArgs.exception">
            <inheritdoc cref="P:Common.ExceptionEventArgs.Exception" select="../value/node()"/>
        </member>
        <member name="F:Common.ExceptionEventArgs.isHandled">
            <summary>
              <inheritdoc cref="P:Common.ExceptionEventArgs.IsHandled" select="../value/node()"/>
            </summary>
        </member>
        <member name="M:Common.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:Common.ExceptionEventArgs">ExceptionEventArgs Class</see>.
            </summary>
            <param name="exception">
              <inheritdoc cref="P:Common.ExceptionEventArgs.Exception" select="../value/node()"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="exception"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Common.ExceptionEventArgs.Exception">
            <summary>
              Gets the exception object.
            </summary>
            <value>
              The exception object.
            </value>
        </member>
        <member name="P:Common.ExceptionEventArgs.IsHandled">
            <summary>
              Gets or sets a <see cref="T:System.Boolean"/> indicating whether the exception has been handled or not.
            </summary>
            <value>
              Indicates whether the exception has been handled or not.
            </value>
        </member>
        <member name="T:Common.ExceptionMessages">
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Common.ExceptionMessages.GetAutostartEntryDoesAlreadyExist(System.String,System.String,Common.VariableType)">
            <summary>
              Returns a string saying that the autostart entry does already exist.
            </summary>
            <param name="entryName">
              The name of the existing autostart entry.
            </param>
            <!-- No matching elements were found for the following include tag --><include path="CommonDoc/ExceptionMessages/Methods/VeriableParams/node()" file="../Documentation/Common.xml"/>
            <returns>
              A string saying that the autostart entry does already exist.
            </returns>
            <!-- No matching elements were found for the following include tag --><include path="CommonDoc/ExceptionMessages/Methods/PathParam/node()" file="../Documentation/Common.xml"/>
        </member>
        <member name="M:Common.ExceptionMessages.GetTypeHasNoSerializableAttribute(System.String)">
            <summary>
              Returns a string saying that the type given in Type Parameter has no XmlSerializable-Attribute.
            </summary>
            <param name="typeName">
              The name of the type in the type parameter.
            </param>
            <returns>
              A string saying that the type given in Type Parameter has no XmlSerializable-Attribute.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessages.GetTypeIsNoSerializableClassOrStruct(System.String)">
            <summary>
              Returns a string saying that the type given in Type Parameter is has to be either a class or a structure. 
            </summary>
            <param name="typeName">
              The name of the type in the type parameter.
            </param>
            <returns>
              A string saying that the type given in Type Parameter is has to be either a class or a structure. 
            </returns>
        </member>
        <member name="M:Common.ExceptionMessages.GetTypeIsNoSerializableClassOrStruct(System.String,System.String,System.String)">
            <summary>
              Returns a string saying that XmlDataMemberAttribute has to contain a MemberName if defined for a derived type
            </summary>
            <param name="typeName">
              The name of the type the member belongs to.
            </param>
            <param name="memberName">
              The name of the member where the attribute is defined for.
            </param>
            <param name="typeDefinitionName">
              The name of the type where the attribute is defined for.
            </param>
            <returns>
              A string saying that XmlDataMemberAttribute has to contain a MemberName if defined for a derived type
            </returns>
        </member>
        <member name="M:Common.ExceptionMessages.GetXmlDataMemberNameNotDefined(System.String,System.String,System.String)">
            <summary>
              Returns a string saying that XmlDataMemberAttribute has to contain a MemberName if defined for a derived type.
            </summary>
            <param name="typeName">
              The name of the type the member belongs to.
            </param>
            <param name="memberName">
              The name of the member where the attribute is defined for.
            </param>
            <param name="typeDefinitionName">
              The name of the type where the attribute is defined for.
            </param>
            <returns>
              A string saying that XmlDataMemberAttribute has to contain a MemberName if defined for a derived type.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessages.GetXmlDataMemberMultipleDefinition(System.String,System.String,System.String)">
            <summary>
              Returns a string saying that XmlDataMemberAttribute is defined multiple times for the same type.
            </summary>
            <param name="typeName">
              The name of the type the member belongs to.
            </param>
            <param name="memberName">
              The name of the member where the attribute is defined for.
            </param>
            <param name="typeDefinitionName">
              The name of the type where the attribute is defined for.
            </param>
            <returns>
              A string saying that XmlDataMemberAttribute is defined multiple times for the same type.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessages.GetXmlDataMemberTypeNotAssignableToRootType(System.String,System.String,System.String)">
            <summary>
              Returns a string saying that XmlDataMemberAttribute is defined for a type which is not assignable to the member's 
              type.
            </summary>
            <param name="typeName">
              The name of the type the member belongs to.
            </param>
            <param name="memberName">
              The name of the member where the attribute is defined for.
            </param>
            <param name="typeDefinitionName">
              The name of the type where the attribute is defined for.
            </param>
            <returns>
              A string saying that XmlDataMemberAttribute is defined for a type which is not assignable to the member's type.
            </returns>
        </member>
        <member name="M:Common.ExceptionMessages.GetKeysAndValuesRequireSameAmountOfItems">
            <summary>
              Returns a string stating that the collection of keys requires to have the same amount of items as the collection of 
              values.
            </summary>
            <returns>
              A string stating that the collection of keys requires to have the same amount of items as the collection of values.
            </returns>
        </member>
        <member name="T:Common.RequestCloseEventArgs">
            <summary>
              Provides Request Close event related data.
            </summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="F:Common.RequestCloseEventArgs.result">
            <summary>
              <inheritdoc cref="P:Common.RequestCloseEventArgs.Result" select="../value/node()"/>
            </summary>
        </member>
        <member name="M:Common.RequestCloseEventArgs.#ctor(System.Nullable{System.Boolean})">
            <summary>
              Initializes a new instance of the <see cref="T:Common.RequestCloseEventArgs">RequestCloseEventArgs Class</see>.
            </summary>
            <param name="result">
              <inheritdoc cref="P:Common.RequestCloseEventArgs.Result" select="../value/node()"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="$ArgumentNameLC"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Common.RequestCloseEventArgs.ToString">
            <inheritdoc />
        </member>
        <member name="P:Common.RequestCloseEventArgs.Result">
            <summary>
              Gets a <see cref="T:System.Boolean"/> indicating the reason why closing is requested.
            </summary>
            <value>
              A <see cref="T:System.Boolean"/> indicating the reason why closing is requested. <c>null</c> if no reason is given at all.
              Default value: <c>null</c>.
            </value>
        </member>
    </members>
</doc>
