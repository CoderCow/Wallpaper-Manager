using System;
using System.Collections.Generic;
using System.Text;

namespace Common {
  /// <summary>
  ///   Provides methods to help defining new <see cref="Exception" /> types.
  /// </summary>
  public static class ExceptionHelper {
    #region Methods: GenerateString
    /// <summary>
    ///   Generates a <see cref="String" /> describing an <see cref="Exception" /> object.
    /// </summary>
    /// <remarks>
    ///   The generated <see cref="String" /> has the following content:
    ///   <list type="number">
    ///     <item>The full name of the <see cref="Exception"/> type.</item>
    ///     <item>The <see cref="Exception.Message" />.</item>
    ///     <item>The message extension set by the parameter.</item>
    ///     <item>The <see cref="Exception.InnerException" />.</item>
    ///     <item>The <see cref="Exception.StackTrace" />.</item>
    ///   </list>
    ///   <para>
    ///     The return value is almost equal to the output generated by Microsoft 
    ///     <c>Exception.ToString()</c> methods.
    ///   </para>
    /// </remarks>
    /// <returns>
    ///   A <see cref="String" /> object, desribing the <see cref="Exception" />.
    /// </returns>
    /// <overloaded>
    ///   Generates a <see cref="String" /> describing an <see cref="Exception" /> object.
    /// </overloaded>
    /// <param name="exception">
    ///   The exception object reference.
    /// </param>
    /// <param name="messageExtension">
    ///   The message extension which gets simply appended to the message.
    /// </param>
    public static String GenerateString(Exception exception, String messageExtension = null) {
      if (exception == null)
        throw new ArgumentNullException("exception");
      
      StringBuilder returnString = new StringBuilder(exception.GetType().FullName);
      
      returnString.Append(':');
      returnString.Append(' ');
      returnString.Append(exception.Message);
      
      if (!(String.IsNullOrEmpty(messageExtension)))
        returnString.Append(messageExtension);

      if (exception.InnerException != null) {
        returnString.Append(" ---> "); 
        returnString.Append(exception.InnerException.ToString());
      }

      if (exception.StackTrace != null) {
        returnString.Append('\r');
        returnString.Append('\n');
        returnString.Append(exception.StackTrace);
      }
      
      return returnString.ToString();
    }
    #endregion
  }
}
